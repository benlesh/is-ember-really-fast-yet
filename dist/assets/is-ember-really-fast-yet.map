{"version":3,"sources":["vendor/ember-cli/app-prefix.js","is-ember-really-fast-yet/app.js","is-ember-really-fast-yet/components/nf-area-stack.js","is-ember-really-fast-yet/components/nf-area.js","is-ember-really-fast-yet/components/nf-bars-group.js","is-ember-really-fast-yet/components/nf-bars.js","is-ember-really-fast-yet/components/nf-brush-selection.js","is-ember-really-fast-yet/components/nf-crosshair.js","is-ember-really-fast-yet/components/nf-dot.js","is-ember-really-fast-yet/components/nf-gg.js","is-ember-really-fast-yet/components/nf-graph-content.js","is-ember-really-fast-yet/components/nf-graph.js","is-ember-really-fast-yet/components/nf-horizontal-line.js","is-ember-really-fast-yet/components/nf-line.js","is-ember-really-fast-yet/components/nf-plot.js","is-ember-really-fast-yet/components/nf-plots.js","is-ember-really-fast-yet/components/nf-range-marker.js","is-ember-really-fast-yet/components/nf-range-markers.js","is-ember-really-fast-yet/components/nf-right-tick.js","is-ember-really-fast-yet/components/nf-selection-box.js","is-ember-really-fast-yet/components/nf-svg-image.js","is-ember-really-fast-yet/components/nf-svg-line.js","is-ember-really-fast-yet/components/nf-svg-path.js","is-ember-really-fast-yet/components/nf-svg-rect.js","is-ember-really-fast-yet/components/nf-vertical-line.js","is-ember-really-fast-yet/components/nf-x-axis.js","is-ember-really-fast-yet/components/nf-y-axis.js","is-ember-really-fast-yet/components/nf-y-diff.js","is-ember-really-fast-yet/controllers/graph-item.js","is-ember-really-fast-yet/initializers/app-version.js","is-ember-really-fast-yet/initializers/export-application-global.js","is-ember-really-fast-yet/router.js","is-ember-really-fast-yet/routes/baseline.js","is-ember-really-fast-yet/routes/index.js","is-ember-really-fast-yet/templates/application.js","is-ember-really-fast-yet/templates/baseline.js","is-ember-really-fast-yet/templates/components/nf-area.js","is-ember-really-fast-yet/templates/components/nf-bars.js","is-ember-really-fast-yet/templates/components/nf-brush-selection.js","is-ember-really-fast-yet/templates/components/nf-crosshair.js","is-ember-really-fast-yet/templates/components/nf-graph-content.js","is-ember-really-fast-yet/templates/components/nf-graph.js","is-ember-really-fast-yet/templates/components/nf-line.js","is-ember-really-fast-yet/templates/components/nf-plots.js","is-ember-really-fast-yet/templates/components/nf-range-marker.js","is-ember-really-fast-yet/templates/components/nf-right-tick.js","is-ember-really-fast-yet/templates/components/nf-table-manager.js","is-ember-really-fast-yet/templates/components/nf-x-axis.js","is-ember-really-fast-yet/templates/components/nf-y-axis.js","is-ember-really-fast-yet/templates/components/nf-y-diff.js","is-ember-really-fast-yet/templates/index.js","is-ember-really-fast-yet/tests/app.jshint.js","is-ember-really-fast-yet/tests/controllers/graph-item.jshint.js","is-ember-really-fast-yet/tests/helpers/resolver.js","is-ember-really-fast-yet/tests/helpers/resolver.jshint.js","is-ember-really-fast-yet/tests/helpers/start-app.js","is-ember-really-fast-yet/tests/helpers/start-app.jshint.js","is-ember-really-fast-yet/tests/router.jshint.js","is-ember-really-fast-yet/tests/routes/baseline.jshint.js","is-ember-really-fast-yet/tests/routes/index.jshint.js","is-ember-really-fast-yet/tests/test-helper.js","is-ember-really-fast-yet/tests/test-helper.jshint.js","is-ember-really-fast-yet/tests/util/range.jshint.js","is-ember-really-fast-yet/util/range.js","is-ember-really-fast-yet/views/nf-plot.js","is-ember-really-fast-yet/views/nf-tick-label.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('is-ember-really-fast-yet/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'is-ember-really-fast-yet/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('is-ember-really-fast-yet/components/nf-area-stack', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'g',\n\n    /**\n      Used by `nf-area` to identify an area stack parent\n      @property isAreaStack\n      @type Boolean\n      @default true\n      @readonly\n    */\n    isAreaStack: true,\n\n    /**\n      The collection of `nf-area` components under this stack.\n      @property areas\n      @type Array\n      @readonly\n    */\n    areas: Ember['default'].computed(function () {\n      return Ember['default'].A();\n    }),\n\n    /**\n      Registers an area component with this stack. Also links areas to one\n      another by setting `nextArea` on each area component.\n      @method registerArea\n      @param area {Ember.Component} The area component to register.\n    */\n    registerArea: function registerArea(area) {\n      var areas = this.get('areas');\n      var prev = areas[areas.length - 1];\n\n      if (prev) {\n        prev.set('nextArea', area);\n        area.set('prevArea', prev);\n      }\n\n      areas.pushObject(area);\n    },\n\n    /**\n      Unregisters an area component from this stack. Also updates next\n      and previous links.\n      @method unregisterArea\n      @param area {Ember.Component} the area to unregister\n    */\n    unregisterArea: function unregisterArea(area) {\n      var prev = area.get('prevArea');\n      var next = area.get('nextArea');\n\n      if (next) {\n        next.set('prevArea', prev);\n      }\n\n      if (prev) {\n        prev.set('nextArea', next);\n      }\n\n      this.get('areas').removeObject(area);\n    } });\n\n});","define('is-ember-really-fast-yet/components/nf-area', ['exports', 'ember', 'ember-nf-graph/mixins/graph-selectable-graphic', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-registered-graphic', 'ember-nf-graph/mixins/graph-data-graphic', 'ember-nf-graph/mixins/graph-area-utils', 'ember-nf-graph/mixins/graph-graphic-with-tracking-dot', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, Selectable, HasGraphParent, RegisteredGraphic, DataGraphic, AreaUtils, GraphicWithTrackingDot, RequireScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RegisteredGraphic['default'], DataGraphic['default'], Selectable['default'], AreaUtils['default'], GraphicWithTrackingDot['default'], RequireScaleSource['default'], {\n\n    tagName: 'g',\n\n    classNameBindings: [':nf-area', 'selected', 'selectable'],\n\n    /**\n      The type of d3 interpolator to use to create the area\n      @property interpolator\n      @type String\n      @default 'linear'\n    */\n    interpolator: 'linear',\n\n    /**\n      The previous area in the stack, if this area is part of an `nf-area-stack`\n      @property prevArea\n      @type components.nf-area\n      @default null\n    */\n    prevArea: null,\n\n    /**\n      The next area in the stack, if this area is part of an `nf-area-stack`\n      @property nextArea\n      @type components.nf-area\n      @default null\n    */\n    nextArea: null,\n\n    init: function init() {\n      this._super.apply(this, arguments);\n      var stack = this.nearestWithProperty('isAreaStack');\n      if (stack) {\n        stack.registerArea(this);\n        this.set('stack', stack);\n      }\n    },\n\n    _unregister: Ember['default'].on('willDestroyElement', function () {\n      var stack = this.get('stack', stack);\n      if (stack) {\n        stack.unregisterArea(this);\n      }\n    }),\n\n    /**\n      The computed set of next y values to use for the \"bottom\" of the graphed area.\n      If the area is part of a stack, this will be the \"top\" of the next area in the stack,\n      otherwise it will return an array of values at the \"bottom\" of the graph domain.\n      @property nextYData\n      @type Array\n      @readonly\n    */\n    nextYData: Ember['default'].computed('renderedData.length', 'nextArea.renderedData.@each', function () {\n      var nextData = this.get('nextArea.renderedData') || [];\n      var renderedDataLength = this.get('renderedData.length');\n\n      var result = nextData.map(function (next) {\n        return next[1];\n      });\n\n      while (result.length < renderedDataLength) {\n        result.push(-99999999);\n      }\n\n      return result;\n    }),\n\n    /**\n      The current rendered data \"zipped\" together with the nextYData.\n      @property areaData\n      @type Array\n      @readonly\n    */\n    areaData: Ember['default'].computed('renderedData.@each', 'nextYData.@each', function () {\n      var nextYData = this.get('nextYData');\n      return this.get('renderedData').map(function (r, i) {\n        return [r[0], r[1], nextYData[i]];\n      });\n    }),\n\n    /**\n      Gets the area function to use to create the area SVG path data\n      @property areaFn\n      @type Function\n      @readonly\n    */\n    areaFn: Ember['default'].computed('xScale', 'yScale', 'interpolator', function () {\n      var xScale = this.get('xScale');\n      var yScale = this.get('yScale');\n      var interpolator = this.get('interpolator');\n      return this.createAreaFn(xScale, yScale, interpolator);\n    }),\n\n    /**\n      The SVG path data for the area\n      @property d\n      @type String\n      @readonly\n    */\n    d: Ember['default'].computed('areaData', 'areaFn', function () {\n      var areaData = this.get('areaData');\n      return this.get('areaFn')(areaData);\n    }),\n\n    click: function click() {\n      if (this.get('selectable')) {\n        this.toggleProperty('selected');\n      }\n    }\n  });\n\n});","define('is-ember-really-fast-yet/components/nf-bars-group', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, HasGraphParent, RequiresScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequiresScaleSource['default'], {\n    tagName: 'g',\n\n    isBarsGroup: true,\n\n    groupPadding: 0.1,\n\n    groupOuterPadding: 0,\n\n    // either b-arses or fat, stupid hobbitses\n    barses: Ember['default'].computed(function () {\n      return Ember['default'].A();\n    }),\n\n    registerBars: function registerBars(bars) {\n      var barses = this.get('barses');\n      barses.pushObject(bars);\n      bars.set('group', this);\n      bars.set('groupIndex', barses.length - 1);\n    },\n\n    unregisterBars: function unregisterBars(bars) {\n      if (bars) {\n        bars.set('group', undefined);\n        bars.set('groupIndex', undefined);\n        this.get('barses').removeObject(bars);\n      }\n    },\n\n    groupWidth: Ember['default'].computed('xScale', function () {\n      var xScale = this.get('xScale');\n      return xScale && xScale.rangeBand ? xScale.rangeBand() : NaN;\n    }),\n\n    barsDomain: Ember['default'].computed('barses.[]', function () {\n      var len = this.get('barses.length') || 0;\n      return d3.range(len);\n    }),\n\n    barScale: Ember['default'].computed('groupWidth', 'barsDomain.[]', 'groupPadding', 'groupOuterPadding', function () {\n      var barsDomain = this.get('barsDomain');\n      var groupWidth = this.get('groupWidth');\n      var groupPadding = this.get('groupPadding');\n      var groupOuterPadding = this.get('groupOuterPadding');\n      return d3.scale.ordinal().domain(barsDomain).rangeBands([0, groupWidth], groupPadding, groupOuterPadding);\n    }),\n\n    barsWidth: function barsWidth() {\n      var scale = this.get('barScale');\n      return scale && scale.rangeBand ? scale.rangeBand() : NaN;\n    } });\n\n});","define('is-ember-really-fast-yet/components/nf-bars', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-data-graphic', 'ember-nf-graph/mixins/graph-registered-graphic', 'ember-nf-graph/utils/parse-property-expression', 'ember-nf-graph/mixins/graph-requires-scale-source', 'ember-nf-graph/mixins/graph-graphic-with-tracking-dot', 'ember-nf-graph/utils/nf/scale-utils', 'ember-nf-graph/utils/nf/svg-dom'], function (exports, Ember, HasGraphParent, DataGraphic, RegisteredGraphic, parsePropExpr, RequireScaleSource, GraphicWithTrackingDot, scale_utils, svg_dom) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RegisteredGraphic['default'], DataGraphic['default'], RequireScaleSource['default'], GraphicWithTrackingDot['default'], {\n    tagName: 'g',\n\n    classNames: ['nf-bars'],\n\n    /**\n      The name of the property on each data item containing the className for the bar rectangle\n      @property classprop\n      @type String\n      @default 'className'\n    */\n    classprop: 'className',\n\n    /**\n      Gets the function to get the classname from each data item.\n      @property getBarClass\n      @readonly\n      @private\n    */\n    getBarClass: Ember['default'].computed('classprop', function () {\n      var classprop = this.get('classprop');\n      return classprop ? parsePropExpr['default'](classprop) : null;\n    }),\n\n    /**\n      The nf-bars-group this belongs to, if any.\n      @property group\n      @type components.nf-bars-group\n      @default null\n    */\n    group: null,\n\n    /**\n      The index of this component within the group, if any.\n      @property groupIndex\n      @type Number\n      @default null\n    */\n    groupIndex: null,\n\n    /**\n      The graph content height\n      @property graphHeight\n      @type Number\n      @readonly\n    */\n    graphHeight: Ember['default'].computed.oneWay('graph.graphHeight'),\n\n    /**\n      A scale provided by nf-bars-group to offset the bar rectangle output\n      @property barScale\n      @type d3.scale\n      @readonly\n    */\n    barScale: Ember['default'].computed.oneWay('group.barScale'),\n\n    /**\n      The width of each bar.\n      @property barWidth\n      @type Number\n      @readonly\n    */\n    barWidth: Ember['default'].computed('xScale', 'barScale', function () {\n      var barScale = this.get('barScale');\n      if (barScale) {\n        return barScale.rangeBand();\n      }\n      var xScale = this.get('xScale');\n      return xScale && xScale.rangeBand ? xScale.rangeBand() : 0;\n    }),\n\n    groupOffsetX: Ember['default'].computed('barScale', 'groupIndex', function () {\n      var barScale = this.get('barScale');\n      var groupIndex = this.get('groupIndex');\n      return scale_utils.normalizeScale(barScale, groupIndex);\n    }),\n\n    /**\n      The bar models used to render the bars.\n      @property bars\n      @readonly\n    */\n    bars: Ember['default'].computed('xScale', 'yScale', 'renderedData.[]', 'graphHeight', 'getBarClass', 'barWidth', 'groupOffsetX', function () {\n      var xScale = this.get('xScale');\n      var yScale = this.get('yScale');\n      var renderedData = this.get('renderedData');\n      var graphHeight = this.get('graphHeight');\n      var getBarClass = this.get('getBarClass');\n      var groupOffsetX = this.get('groupOffsetX');\n\n      if (!xScale || !yScale || !Ember['default'].isArray(renderedData)) {\n        return null;\n      }\n\n      var w = this.get('barWidth');\n\n      return Ember['default'].A(renderedData.map(function (d) {\n        var barClass = 'nf-bars-bar' + getBarClass ? ' ' + getBarClass(d.data) : '';\n        var x = scale_utils.normalizeScale(xScale, d[0]) + groupOffsetX;\n        var y = scale_utils.normalizeScale(yScale, d[1]);\n        var h = graphHeight - y;\n        return {\n          path: svg_dom.getRectPath(x, y, w, h),\n          className: barClass,\n          data: d };\n      }));\n    }),\n\n    /**\n      The name of the action to fire when a bar is clicked.\n      @property barClick\n      @type String\n      @default null\n    */\n    barClick: null,\n\n    init: function init() {\n      this._super.apply(this, arguments);\n      var group = this.nearestWithProperty('isBarsGroup');\n      if (group && group.registerBars) {\n        group.registerBars(this);\n      }\n    },\n\n    actions: {\n      nfBarClickBar: function nfBarClickBar(dataPoint) {\n        if (this.get('barClick')) {\n          this.sendAction('barClick', {\n            data: dataPoint.data,\n            x: dataPoint[0],\n            y: dataPoint[1],\n            source: this,\n            graph: this.get('graph') });\n        }\n      }\n    }\n\n  });\n\n});","define('is-ember-really-fast-yet/components/nf-brush-selection', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, HasGraphParent, RequiresScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequiresScaleSource['default'], {\n    tagName: 'g',\n\n    left: undefined,\n\n    right: undefined,\n\n    formatter: null,\n\n    textPadding: 3,\n\n    autoWireUp: true,\n\n    _autoBrushHandler: function _autoBrushHandler(e) {\n      this.set('left', Ember['default'].get(e, 'left.x'));\n      this.set('right', Ember['default'].get(e, 'right.x'));\n    },\n\n    _autoBrushEndHandler: function _autoBrushEndHandler(e) {\n      this.set('left', undefined);\n      this.set('right', undefined);\n    },\n\n    _wireToGraph: function _wireToGraph() {\n      var graph = this.get('graph');\n      var auto = this.get('autoWireUp');\n\n      if (auto) {\n        graph.on('didBrushStart', this, this._autoBrushHandler);\n        graph.on('didBrush', this, this._autoBrushHandler);\n        graph.on('didBrushEnd', this, this._autoBrushEndHandler);\n      } else {\n        graph.off('didBrushStart', this, this._autoBrushHandler);\n        graph.off('didBrush', this, this._autoBrushHandler);\n        graph.off('didBrushEnd', this, this._autoBrushEndHandler);\n      }\n    },\n\n    _autoWireUpChanged: Ember['default'].on('didInsertElement', Ember['default'].observer('autoWireUp', function () {\n      Ember['default'].run.once(this, this._wireToGraph);\n    })),\n\n    _updateLeftText: function _updateLeftText() {\n      var root = d3.select(this.element);\n      var g = root.select('.nf-brush-selection-left-display');\n      var text = g.select('.nf-brush-selection-left-text');\n      var bg = g.select('.nf-brush-selection-left-text-bg');\n\n      var display = this.get('leftDisplay');\n\n      if (!display) {\n        g.attr('hidden', true);\n      } else {\n        g.attr('hidden', null);\n      }\n\n      text.text(display);\n\n      var textPadding = this.get('textPadding');\n      var leftX = this.get('leftX');\n      var graphHeight = this.get('graphHeight');\n      var bbox = text[0][0].getBBox();\n\n      var doublePad = textPadding * 2;\n      var width = bbox.width + doublePad;\n      var height = bbox.height + doublePad;\n      var x = Math.max(0, leftX - width);\n      var y = graphHeight - height;\n\n      g.attr('transform', 'translate(' + x + ' ' + y + ')');\n\n      text.attr('x', textPadding).attr('y', textPadding);\n\n      bg.attr('width', width).attr('height', height);\n    },\n\n    _onLeftChange: Ember['default'].on('didInsertElement', Ember['default'].observer('left', 'graphHeight', 'textPadding', function () {\n      Ember['default'].run.once(this, this._updateLeftText);\n    })),\n\n    _updateRightText: function _updateRightText() {\n      var root = d3.select(this.element);\n      var g = root.select('.nf-brush-selection-right-display');\n      var text = g.select('.nf-brush-selection-right-text');\n      var bg = g.select('.nf-brush-selection-right-text-bg');\n\n      var display = this.get('rightDisplay');\n\n      if (!display) {\n        g.attr('hidden', true);\n      } else {\n        g.attr('hidden', null);\n      }\n\n      text.text(display);\n\n      var textPadding = this.get('textPadding');\n      var rightX = this.get('rightX');\n      var graphHeight = this.get('graphHeight');\n      var graphWidth = this.get('graphWidth');\n      var bbox = text[0][0].getBBox();\n\n      var doublePad = textPadding * 2;\n      var width = bbox.width + doublePad;\n      var height = bbox.height + doublePad;\n      var x = Math.min(graphWidth - width, rightX);\n      var y = graphHeight - height;\n\n      g.attr('transform', 'translate(' + x + ' ' + y + ')');\n\n      text.attr('x', textPadding).attr('y', textPadding);\n\n      bg.attr('width', width).attr('height', height);\n    },\n\n    _onRightChange: Ember['default'].on('didInsertElement', Ember['default'].observer('right', 'graphHeight', 'graphWidth', 'textPadding', function () {\n      Ember['default'].run.once(this, this._updateRightText);\n    })),\n\n    leftDisplay: Ember['default'].computed('left', 'formatter', function () {\n      var formatter = this.get('formatter');\n      var left = this.get('left');\n      return formatter ? formatter(left) : left;\n    }),\n\n    rightDisplay: Ember['default'].computed('right', 'formatter', function () {\n      var formatter = this.get('formatter');\n      var right = this.get('right');\n      return formatter ? formatter(right) : right;\n    }),\n\n    isVisible: Ember['default'].computed('left', 'right', function () {\n      var left = +this.get('left');\n      var right = +this.get('right');\n      return left === left && right === right;\n    }),\n\n    leftX: Ember['default'].computed('xScale', 'left', function () {\n      var left = this.get('left') || 0;\n      var scale = this.get('xScale');\n      return scale ? scale(left) : 0;\n    }),\n\n    rightX: Ember['default'].computed('xScale', 'right', function () {\n      var right = this.get('right') || 0;\n      var scale = this.get('xScale');\n      return scale ? scale(right) : 0;\n    }),\n\n    graphWidth: Ember['default'].computed.alias('graph.graphWidth'),\n\n    graphHeight: Ember['default'].computed.alias('graph.graphHeight'),\n\n    rightWidth: Ember['default'].computed('rightX', 'graphWidth', function () {\n      return this.get('graphWidth') - this.get('rightX') || 0;\n    }) });\n\n});","define('is-ember-really-fast-yet/components/nf-crosshair', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent'], function (exports, Ember, HasGraphParent) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], {\n    tagName: 'g',\n\n    classNames: ['nf-crosshair'],\n\n    /**\n      The height of the crosshair in pixels\n      @property height\n      @type Number\n      @readonly\n    */\n    height: Ember['default'].computed.alias('graph.graphHeight'),\n\n    /**\n      The width of the crosshair in pixels\n      @property width\n      @type Number\n      @readonly\n    */\n    width: Ember['default'].computed.alias('graph.graphWidth'),\n\n    /**\n      The x position of the crosshairs\n      @property x\n      @type Number\n      @default 0\n    */\n    x: 0,\n\n    /**\n      The y position of the crosshairs\n      @property y\n      @type Number\n      @default 0\n    */\n    y: 0,\n\n    /**\n      The visibility of the component\n      @property isVisible\n      @type Boolean\n      @default false\n    */\n    isVisible: false,\n\n    didContentHoverChange: function didContentHoverChange(e) {\n      this.set('isVisible', true);\n      this.set('x', e.get('mouseX'));\n      this.set('y', e.get('mouseY'));\n    },\n\n    didContentHoverEnd: function didContentHoverEnd() {\n      this.set('isVisible', false);\n    },\n\n    _setupBindings: Ember['default'].observer('graph.content', function () {\n      var content = this.get('graph.content');\n      if (content) {\n        content.on('didHoverChange', this, this.didContentHoverChange);\n        content.on('didHoverEnd', this, this.didContentHoverEnd);\n      }\n    }) });\n\n});","define('is-ember-really-fast-yet/components/nf-dot', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, HasGraphParent, RequireScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'circle',\n\n    attributeBindings: ['r', 'cy', 'cx'],\n\n    /**\n      The x domain value at which to plot the circle\n      @property x\n      @type Number\n      @default null\n    */\n    x: null,\n\n    /**\n      The y domain value at which to plot the circle\n      @property x\n      @type Number\n      @default null\n    */\n    y: null,\n\n    /**\n      The radius of the circle plotted\n      @property r\n      @type Number\n      @default 2.5\n    */\n    r: 2.5,\n\n    hasX: Ember['default'].computed.notEmpty('x'),\n\n    hasY: Ember['default'].computed.notEmpty('y'),\n\n    /**\n      The computed center x coordinate of the circle\n      @property cx\n      @type Number\n      @private\n      @readonly\n    */\n    cx: Ember['default'].computed('x', 'xScale', 'hasX', function () {\n      var x = this.get('x');\n      var xScale = this.get('xScale');\n      var hasX = this.get('hasX');\n      return hasX && xScale ? xScale(x) : -1;\n    }),\n\n    /**\n      The computed center y coordinate of the circle\n      @property cy\n      @type Number\n      @private\n      @readonly\n    */\n    cy: Ember['default'].computed('y', 'yScale', 'hasY', function () {\n      var y = this.get('y');\n      var yScale = this.get('yScale');\n      var hasY = this.get('hasY');\n      return hasY && yScale ? yScale(y) : -1;\n    }),\n\n    /**\n      Toggles the visibility of the dot. If x or y are\n      not numbers, will return false.\n      @property isVisible\n      @private\n      @readonly\n    */\n    isVisible: Ember['default'].computed.and('hasX', 'hasY') });\n\n});","define('is-ember-really-fast-yet/components/nf-gg', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'ember-nf-graph/mixins/graph-selectable-graphic'], function (exports, Ember, HasGraphParent, RequireScaleSource, SelectableGraphic) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], SelectableGraphic['default'], {\n    tagName: 'g',\n\n    classNameBindings: [':nf-gg', 'selectable', 'selected'],\n\n    isScaleSource: true,\n\n    click: function click() {\n      if (this.get('selectable')) {\n        this.toggleProperty('selected');\n      }\n    }\n  });\n\n});","define('is-ember-really-fast-yet/components/nf-graph-content', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/utils/nf/graph-mouse-event'], function (exports, Ember, HasGraphParent, GraphMouseEvent) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], {\n    tagName: 'g',\n\n    classNames: ['nf-graph-content'],\n\n    attributeBindings: ['transform', 'clip-path'],\n\n    'clip-path': Ember['default'].computed('graph.contentClipPathId', function () {\n      var clipPathId = this.get('graph.contentClipPathId');\n      return 'url(\\'#' + clipPathId + '\\')';\n    }),\n\n    /**\n      The SVG transform for positioning the graph content\n      @property transform\n      @type String\n      @readonly\n    */\n    transform: Ember['default'].computed('x', 'y', function () {\n      var x = this.get('x');\n      var y = this.get('y');\n      return 'translate(' + x + ' ' + y + ')';\n    }),\n\n    /**\n      The x position of the graph content\n      @property x\n      @type Number\n      @readonly\n    */\n    x: Ember['default'].computed.alias('graph.graphX'),\n\n    /**\n      The calculated y position of the graph content\n      @property y\n      @type Number\n      @readonly\n    */\n    y: Ember['default'].computed.alias('graph.graphY'),\n\n    /**\n      The calculated width of the graph content\n      @property width\n      @type Number\n      @readonly\n    */\n    width: Ember['default'].computed.alias('graph.graphWidth'),\n\n    /**\n      The calculated height of the graph content.\n      @property height\n      @type Number\n      @readonly\n    */\n    height: Ember['default'].computed.alias('graph.graphHeight'),\n\n    /**\n      An array containing models to render the grid lanes\n      @property gridLanes\n      @type Array\n      @readonly\n    */\n    gridLanes: Ember['default'].computed('graph.yAxis.ticks', 'width', 'height', function () {\n      var ticks = this.get('graph.yAxis.ticks');\n      var width = this.get('width');\n      var height = this.get('height');\n\n      if (!ticks || ticks.length === 0) {\n        return [];\n      }\n\n      var sorted = ticks.slice().sort(function (a, b) {\n        return a.y - b.y;\n      });\n\n      if (sorted[0].y !== 0) {\n        sorted.unshift({ y: 0 });\n      }\n\n      var lanes = sorted.reduce(function (lanes, tick, i) {\n        var y = tick.y;\n        var next = sorted[i + 1] || { y: height };\n        var h = next.y - tick.y;\n        lanes.push({\n          x: 0,\n          y: y,\n          width: width,\n          height: h\n        });\n        return lanes;\n      }, []);\n\n      return Ember['default'].A(lanes);\n    }),\n\n    /**\n      The name of the hoverChange action to fire\n      @property hoverChange\n      @type String\n      @default null\n    */\n    hoverChange: null,\n\n    mouseMove: function mouseMove(e) {\n      var context = GraphMouseEvent['default'].create({\n        originalEvent: e,\n        source: this,\n        graphContentElement: this.element });\n\n      this.trigger('didHoverChange', context);\n\n      if (this.get('hoverChange')) {\n        this.sendAction('hoverChange', context);\n      }\n    },\n\n    /**\n      The name of the hoverEnd action to fire\n      @property hoverEnd\n      @type String\n      @default null\n    */\n    hoverEnd: null,\n\n    mouseLeave: function mouseLeave(e) {\n      var context = GraphMouseEvent['default'].create({\n        originalEvent: e,\n        source: this,\n        graphContentElement: this.element\n      });\n      this.trigger('didHoverEnd', context);\n\n      if (this.get('hoverEnd')) {\n        this.sendAction('hoverEnd', context);\n      }\n    },\n\n    /**\n      An array containing models to render fret lines\n      @property frets\n      @type Array\n      @readonly\n    */\n    frets: Ember['default'].computed.alias('graph.xAxis.ticks'),\n\n    init: function init() {\n      this._super.apply(this, arguments);\n      this.set('graph.content', this);\n    } });\n\n});","define('is-ember-really-fast-yet/components/nf-graph', ['exports', 'ember', 'ember-nf-graph/utils/nf/graph-position', 'ember-nf-graph/utils/nf/svg-dom', 'ember-nf-graph/utils/nf/array-helpers'], function (exports, Ember, GraphPosition, svg_dom, array_helpers) {\n\n  'use strict';\n\n  var Observable = Rx.Observable;\n\n  var computedBool = Ember['default'].computed.bool;\n\n  var scaleFactoryProperty = function scaleFactoryProperty(axis) {\n    var scaleTypeKey = axis + 'ScaleType';\n    var powExponentKey = axis + 'PowerExponent';\n\n    return Ember['default'].computed(scaleTypeKey, powExponentKey, function () {\n      var type = this.get(scaleTypeKey);\n      var powExp = this.get(powExponentKey);\n\n      type = typeof type === 'string' ? type.toLowerCase() : '';\n\n      if (type === 'linear') {\n        return d3.scale.linear;\n      } else if (type === 'ordinal') {\n        return d3.scale.ordinal;\n      } else if (type === 'power' || type === 'pow') {\n        return function () {\n          return d3.scale.pow().exponent(powExp);\n        };\n      } else if (type === 'log') {\n        return d3.scale.log;\n      } else {\n        Ember['default'].warn('unknown scale type: ' + type);\n        return d3.scale.linear;\n      }\n    });\n  };\n\n  var domainProperty = function domainProperty(axis) {\n    var dataKey = axis + 'Data';\n    var minKey = axis + 'Min';\n    var maxKey = axis + 'Max';\n    var scaleTypeKey = axis + 'ScaleType';\n    var logMinKey = axis + 'LogMin';\n\n    return Ember['default'].computed(dataKey + '.@each', minKey, maxKey, scaleTypeKey, logMinKey, function () {\n      var data = this.get(dataKey);\n      var min = this.get(minKey);\n      var max = this.get(maxKey);\n      var scaleType = this.get(scaleTypeKey);\n      var logMin = this.get(logMinKey);\n      var domain = null;\n\n      if (scaleType === 'ordinal') {\n        domain = data;\n      } else {\n        var extent = [min, max];\n\n        if (scaleType === 'log') {\n          if (extent[0] <= 0) {\n            extent[0] = logMin;\n          }\n          if (extent[1] <= 0) {\n            extent[1] = logMin;\n          }\n        }\n\n        domain = extent;\n      }\n\n      return domain;\n    });\n  };\n\n  var scaleProperty = function scaleProperty(axis) {\n    var scaleFactoryKey = axis + 'ScaleFactory';\n    var rangeKey = axis + 'Range';\n    var domainKey = axis + 'Domain';\n    var scaleTypeKey = axis + 'ScaleType';\n    var ordinalPaddingKey = axis + 'OrdinalPadding';\n    var ordinalOuterPaddingKey = axis + 'OrdinalOuterPadding';\n\n    return Ember['default'].computed(scaleFactoryKey, rangeKey, scaleTypeKey, ordinalPaddingKey, domainKey, ordinalOuterPaddingKey, function () {\n      var scaleFactory = this.get(scaleFactoryKey);\n      var range = this.get(rangeKey);\n      var domain = this.get(domainKey);\n      var scaleType = this.get(scaleTypeKey);\n      var ordinalPadding = this.get(ordinalPaddingKey);\n      var ordinalOuterPadding = this.get(ordinalOuterPaddingKey);\n\n      var scale = scaleFactory();\n\n      if (scaleType === 'ordinal') {\n        scale = scale.domain(domain).rangeBands(range, ordinalPadding, ordinalOuterPadding);\n      } else {\n        scale = scale.domain(domain).range(range).clamp(true);\n      }\n\n      return scale;\n    });\n  };\n\n  var minProperty = function minProperty(axis, defaultTickCount) {\n    var _DataExtent_ = axis + 'DataExtent';\n    var _MinMode_ = axis + 'MinMode';\n    var _Axis_tickCount_ = axis + 'Axis.tickCount';\n    var _ScaleFactory_ = axis + 'ScaleFactory';\n    var __Min_ = '_' + axis + 'Min';\n    var _prop_ = axis + 'Min';\n\n    return Ember['default'].computed(_MinMode_, _DataExtent_, _Axis_tickCount_, _ScaleFactory_, function (key, value) {\n      var mode = this.get(_MinMode_);\n      var ext;\n\n      if (arguments.length > 1) {\n        this[__Min_] = value;\n      } else {\n        var change = (function (val) {\n          this.set(_prop_, val);\n        }).bind(this);\n\n        if (mode === 'auto') {\n          change(this.get(_DataExtent_)[0] || 0);\n        } else if (mode === 'push') {\n          ext = this.get(_DataExtent_)[0];\n          if (!isNaN(ext) && ext < this[__Min_]) {\n            change(ext);\n          }\n        } else if (mode === 'push-tick') {\n          var extent = this.get(_DataExtent_);\n          ext = extent[0];\n\n          if (!isNaN(ext) && ext < this[__Min_]) {\n            var tickCount = this.get(_Axis_tickCount_) || defaultTickCount;\n            var newDomain = this.get(_ScaleFactory_)().domain(extent).nice(tickCount).domain();\n            change(newDomain[0]);\n          }\n        }\n      }\n\n      return this[__Min_];\n    });\n  };\n\n  var maxProperty = function maxProperty(axis, defaultTickCount) {\n    var _DataExtent_ = axis + 'DataExtent';\n    var _Axis_tickCount_ = axis + 'Axis.tickCount';\n    var _ScaleFactory_ = axis + 'ScaleFactory';\n    var _MaxMode_ = axis + 'MaxMode';\n    var __Max_ = '_' + axis + 'Max';\n    var _prop_ = axis + 'Max';\n\n    return Ember['default'].computed(_MaxMode_, _DataExtent_, _ScaleFactory_, _Axis_tickCount_, function (key, value) {\n      var mode = this.get(_MaxMode_);\n      var ext;\n\n      if (arguments.length > 1) {\n        this[__Max_] = value;\n      } else {\n        var change = (function (val) {\n          this.set(_prop_, val);\n        }).bind(this);\n\n        if (mode === 'auto') {\n          change(this.get(_DataExtent_)[1] || 1);\n        } else if (mode === 'push') {\n          ext = this.get(_DataExtent_)[1];\n          if (!isNaN(ext) && this[__Max_] < ext) {\n            change(ext);\n          }\n        } else if (mode === 'push-tick') {\n          var extent = this.get(_DataExtent_);\n          ext = extent[1];\n\n          if (!isNaN(ext) && this[__Max_] < ext) {\n            var tickCount = this.get(_Axis_tickCount_) || defaultTickCount;\n            var newDomain = this.get(_ScaleFactory_)().domain(extent).nice(tickCount).domain();\n            change(newDomain[1]);\n          }\n        }\n      }\n\n      return this[__Max_];\n    });\n  };\n\n  /**\n    A container component for building complex Cartesian graphs.\n\n    ## Minimal example\n\n         {{#nf-graph width=100 height=50}}\n           {{#nf-graph-content}}\n             {{nf-line data=lineData xprop=\"foo\" yprop=\"bar\"}}\n           {{/nf-graph-content}}\n         {{/nf-graph}}\n\n    The above will create a simple 100x50 graph, with no axes, and a single line\n    plotting the data it finds on each object in the array `lineData` at properties\n    `foo` and `bar` for x and y values respectively.\n\n    ## More advanced example\n\n         {{#nf-graph width=500 height=300}}\n           {{#nf-x-axis height=\"50\"}}\n             <text>{{tick.value}}</text>\n           {{/nf-x-axis}}\n     \n           {{#nf-y-axis width=\"120\"}}\n             <text>{{tick.value}}</text>\n           {{/nf-y-axis}}\n     \n           {{#nf-graph-content}}\n             {{nf-line data=lineData xprop=\"foo\" yprop=\"bar\"}}\n           {{/nf-graph-content}}\n         {{/nf-graph}}\n\n    The above example will create a 500x300 graph with both axes visible. The graph will not \n    render either axis unless its component is present.\n\n\n    @namespace components\n    @class nf-graph\n    @extends Ember.Component\n  */\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: 'div',\n\n    /**\n      The exponent to use for xScaleType \"pow\" or \"power\".\n      @property xPowerExponent\n      @type Number\n      @default 3\n    */\n    xPowerExponent: 3,\n\n    /**\n      The exponent to use for yScaleType \"pow\" or \"power\".\n      @property yPowerExponent\n      @type Number\n      @default 3\n    */\n    yPowerExponent: 3,\n\n    /**\n      The min value to use for xScaleType \"log\" if xMin <= 0\n      @property xLogMin\n      @type Number\n      @default 0.1\n    */\n    xLogMin: 0.1,\n\n    /**\n      The min value to use for yScaleType \"log\" if yMin <= 0\n      @property yLogMin\n      @type Number\n      @default 0.1\n    */\n    yLogMin: 0.1,\n\n    /** \n      Allows child compoenents to identify graph parent.\n      @property isGraph\n      @private\n    */\n    isGraph: true,\n\n    /**\n      Identifies this graph to its children as providing scales.\n      @property isScaleSource\n      @private\n    */\n    isScaleSource: true,\n\n    /**\n      @property hasRendered\n      @private\n    */\n    hasRendered: false,\n\n    /**\n      Gets or sets the whether or not multiple selectable graphics may be\n      selected simultaneously.\n      @property selectMultiple\n      @type Boolean\n      @default false\n    */\n    selectMultiple: false,\n\n    /**\n      The width of the graph in pixels.\n      @property width\n      @type Number\n      @default 300\n    */\n    width: 300,\n\n    /**\n      The height of the graph in pixels.\n      @property height\n      @type Number\n      @default 100\n    */\n    height: 100,\n\n    /**\n      The padding at the top of the graph\n      @property paddingTop\n      @type Number\n      @default 0\n    */\n    paddingTop: 0,\n\n    /**\n      The padding at the left of the graph\n      @property paddingLeft\n      @type Number\n      @default 0\n    */\n    paddingLeft: 0,\n\n    /**\n      The padding at the right of the graph\n      @property paddingRight\n      @type Number\n      @default 0\n    */\n    paddingRight: 0,\n\n    /**\n      The padding at the bottom of the graph\n      @property paddingBottom\n      @type Number\n      @default 0\n    */\n    paddingBottom: 0,\n\n    /**\n      Determines whether to display \"lanes\" in the background of\n      the graph.\n      @property showLanes\n      @type Boolean\n      @default false\n    */\n    showLanes: false,\n\n    /**\n      Determines whether to display \"frets\" in the background of\n      the graph.\n      @property showFrets\n      @type Boolean\n      @default false \n    */\n    showFrets: false,\n\n    /**\n      The type of scale to use for x values.\n      \n      Possible Values:\n      - `'linear'` - a standard linear scale\n      - `'log'` - a logarithmic scale\n      - `'power'` - a power-based scale (exponent = 3)\n      - `'ordinal'` - an ordinal scale, used for ordinal data. required for bar graphs.\n      \n      @property xScaleType\n      @type String\n      @default 'linear'\n    */\n    xScaleType: 'linear',\n\n    /**\n      The type of scale to use for y values.\n      \n      Possible Values:\n      - `'linear'` - a standard linear scale\n      - `'log'` - a logarithmic scale\n      - `'power'` - a power-based scale (exponent = 3)\n      - `'ordinal'` - an ordinal scale, used for ordinal data. required for bar graphs.\n      \n      @property yScaleType\n      @type String\n      @default 'linear'\n    */\n    yScaleType: 'linear',\n\n    /**\n      The padding between value steps when `xScaleType` is `'ordinal'`\n      @property xOrdinalPadding\n      @type Number\n      @default 0.1\n    */\n    xOrdinalPadding: 0.1,\n\n    /**\n      The padding at the ends of the domain data when `xScaleType` is `'ordinal'`\n      @property xOrdinalOuterPadding\n      @type Number\n      @default 0.1\n    */\n    xOrdinalOuterPadding: 0.1,\n\n    /**\n      The padding between value steps when `xScaleType` is `'ordinal'`\n      @property yOrdinalPadding\n      @type Number\n      @default 0.1\n    */\n    yOrdinalPadding: 0.1,\n\n    /**\n      The padding at the ends of the domain data when `yScaleType` is `'ordinal'`\n      @property yOrdinalOuterPadding\n      @type Number\n      @default 0.1\n    */\n    yOrdinalOuterPadding: 0.1,\n\n    /**\n      the `nf-y-axis` component is registered here if there is one present\n      @property yAxis\n      @readonly\n      @default null\n    */\n    yAxis: null,\n\n    /**\n      The `nf-x-axis` component is registered here if there is one present\n      @property xAxis\n      @readonly\n      @default null\n    */\n    xAxis: null,\n\n    /**\n      Backing field for `xMin`\n      @property _xMin\n      @private\n    */\n    _xMin: null,\n\n    /**\n      Backing field for `xMax`\n      @property _xMax\n      @private\n    */\n    _xMax: null,\n\n    /**\n      Backing field for `yMin`\n      @property _yMin\n      @private\n    */\n    _yMin: null,\n\n    /**\n      Backing field for `yMax`\n      @property _yMax\n      @private\n    */\n    _yMax: null,\n\n    /**\n      Gets or sets the minimum x domain value to display on the graph.\n      Behavior depends on `xMinMode`.\n      @property xMin\n    */\n    xMin: minProperty('x', 8),\n\n    /**\n      Gets or sets the maximum x domain value to display on the graph.\n      Behavior depends on `xMaxMode`.\n      @property xMax\n    */\n    xMax: maxProperty('x', 8),\n\n    /**\n      Gets or sets the minimum y domain value to display on the graph.\n      Behavior depends on `yMinMode`.\n      @property yMin\n    */\n    yMin: minProperty('y', 5),\n\n    /**\n      Gets or sets the maximum y domain value to display on the graph.\n      Behavior depends on `yMaxMode`.\n      @property yMax\n    */\n    yMax: maxProperty('y', 5),\n\n    /**\n      Sets the behavior of `xMin` for the graph.\n       ### Possible values:\n       - 'auto': (default) xMin is always equal to the minimum domain value contained in the graphed data. Cannot be set.\n      - 'fixed': xMin can be set to an exact value and will not change based on graphed data.\n      - 'push': xMin can be set to a specific value, but will update if the minimum x value contained in the graph is less than \n        what xMin is currently set to.\n      - 'push-tick': xMin can be set to a specific value, but will update to next \"nice\" tick if the minimum x value contained in\n        the graph is less than that xMin is set to.\n       @property xMinMode\n      @type String\n      @default 'auto'\n    */\n    xMinMode: 'auto',\n\n    /**\n      Sets the behavior of `xMax` for the graph.\n       ### Possible values:\n       - 'auto': (default) xMax is always equal to the maximum domain value contained in the graphed data. Cannot be set.\n      - 'fixed': xMax can be set to an exact value and will not change based on graphed data.\n      - 'push': xMax can be set to a specific value, but will update if the maximum x value contained in the graph is greater than \n        what xMax is currently set to.\n      - 'push-tick': xMax can be set to a specific value, but will update to next \"nice\" tick if the maximum x value contained in\n        the graph is greater than that xMax is set to.\n        \n      @property xMaxMode\n      @type String\n      @default 'auto'\n    */\n    xMaxMode: 'auto',\n\n    /**\n      Sets the behavior of `yMin` for the graph.\n       ### Possible values:\n       - 'auto': (default) yMin is always equal to the minimum domain value contained in the graphed data. Cannot be set.\n      - 'fixed': yMin can be set to an exact value and will not change based on graphed data.\n      - 'push': yMin can be set to a specific value, but will update if the minimum y value contained in the graph is less than \n        what yMin is currently set to.\n      - 'push-tick': yMin can be set to a specific value, but will update to next \"nice\" tick if the minimum y value contained in\n        the graph is less than that yMin is set to.\n       @property yMinMode\n      @type String\n      @default 'auto'\n    */\n    yMinMode: 'auto',\n\n    /**\n      Sets the behavior of `yMax` for the graph.\n       ### Possible values:\n       - 'auto': (default) yMax is always equal to the maximum domain value contained in the graphed data. Cannot be set.\n      - 'fixed': yMax can be set to an exact value and will not change based on graphed data.\n      - 'push': yMax can be set to a specific value, but will update if the maximum y value contained in the graph is greater than \n        what yMax is currently set to.\n      - 'push-tick': yMax can be set to a specific value, but will update to next \"nice\" tick if the maximum y value contained in\n        the graph is greater than that yMax is set to.\n        \n      @property yMaxMode\n      @type String\n      @default 'auto'\n    */\n    yMaxMode: 'auto',\n\n    /**\n      Gets the highest and lowest x values of the graphed data in a two element array.\n      @property xDataExtent\n      @type Array\n      @readonly\n    */\n    xDataExtent: Ember['default'].computed('xData', function () {\n      var xData = this.get('xData');\n      return xData ? d3.extent(xData) : [null, null];\n    }),\n\n    /**\n      Gets the highest and lowest y values of the graphed data in a two element array.\n      @property yDataExtent\n      @type Array\n      @readonly\n    */\n    yDataExtent: Ember['default'].computed('yData', function () {\n      var yData = this.get('yData');\n      return yData ? d3.extent(yData) : [null, null];\n    }),\n\n    /**\n      Gets all x data from all graphics.\n      @property xData\n      @type Array\n      @readonly\n    */\n    xData: Ember['default'].computed('graphics.@each.xData', function () {\n      var graphics = this.get('graphics');\n      var all = [];\n      graphics.forEach(function (graphic) {\n        all = all.concat(graphic.get('xData'));\n      });\n      return Ember['default'].A(all);\n    }),\n\n    /**\n      Gets all y data from all graphics\n      @property yData\n      @type Array\n      @readonly\n    */\n    yData: Ember['default'].computed('graphics.@each.yData', function () {\n      var graphics = this.get('graphics');\n      var all = [];\n      graphics.forEach(function (graphic) {\n        all = all.concat(graphic.get('yData'));\n      });\n      return Ember['default'].A(all);\n    }),\n\n    /**\n      Gets the DOM id for the content clipPath element.\n      @property contentClipPathId\n      @type String\n      @readonly\n      @private\n    */\n    contentClipPathId: Ember['default'].computed('elementId', function () {\n      return this.get('elementId') + '-content-mask';\n    }),\n\n    /**\n      Registry of contained graphic elements such as `nf-line` or `nf-area` components.\n      This registry is used to pool data for scaling purposes.\n      @property graphics\n      @type Array\n      @readonly\n     */\n    graphics: Ember['default'].computed(function () {\n      return Ember['default'].A();\n    }),\n\n    /**\n      An array of \"selectable\" graphics that have been selected within this graph.\n      @property selected\n      @type Array\n      @readonly\n    */\n    selected: null,\n\n    /**\n      Computed property to show yAxis. Returns `true` if a yAxis is present.\n      @property showYAxis\n      @type Boolean\n      @default false\n     */\n    showYAxis: computedBool('yAxis'),\n\n    /**\n      Computed property to show xAxis. Returns `true` if an xAxis is present.\n      @property showXAxis\n      @type Boolean\n      @default false\n     */\n    showXAxis: computedBool('xAxis'),\n\n    /**\n      Gets a function to create the xScale\n      @property xScaleFactory\n      @readonly\n     */\n    xScaleFactory: scaleFactoryProperty('x'),\n\n    /**\n      Gets a function to create the yScale\n      @property yScaleFactory\n      @readonly\n     */\n    yScaleFactory: scaleFactoryProperty('y'),\n\n    /**\n      Gets the domain of x values.\n      @property xDomain\n      @type Array\n      @readonly\n     */\n    xDomain: domainProperty('x'),\n\n    /**\n      Gets the domain of y values.\n      @property yDomain\n      @type Array\n      @readonly\n     */\n    yDomain: domainProperty('y'),\n\n    /**\n      Gets the current xScale used to draw the graph.\n      @property xScale\n      @type Function\n      @readonly\n     */\n    xScale: scaleProperty('x'),\n\n    /**\n      Gets the current yScale used to draw the graph.\n      @property yScale\n      @type Function\n      @readonly\n     */\n    yScale: scaleProperty('y'),\n\n    /**\n      Registers a graphic such as `nf-line` or `nf-area` components with the graph.\n      @method registerGraphic\n      @param graphic {Ember.Component} The component object to register\n     */\n    registerGraphic: function registerGraphic(graphic) {\n      var graphics = this.get('graphics');\n      graphics.pushObject(graphic);\n    },\n\n    /**\n      Unregisters a graphic such as an `nf-line` or `nf-area` from the graph.\n      @method unregisterGraphic\n      @param graphic {Ember.Component} The component to unregister\n     */\n    unregisterGraphic: function unregisterGraphic(graphic) {\n      var graphics = this.get('graphics');\n      graphics.removeObject(graphic);\n    },\n\n    /**\n      The y range of the graph in pixels. The min and max pixel values\n      in an array form.\n      @property yRange\n      @type Array\n      @readonly\n     */\n    yRange: Ember['default'].computed('graphHeight', function () {\n      return [this.get('graphHeight'), 0];\n    }),\n\n    /**\n      The x range of the graph in pixels. The min and max pixel values\n      in an array form.\n      @property xRange\n      @type Array\n      @readonly\n     */\n    xRange: Ember['default'].computed('graphWidth', function () {\n      return [0, this.get('graphWidth')];\n    }),\n\n    /**\n      Returns `true` if the graph has data to render. Data is conveyed\n      to the graph by registered graphics.\n      @property hasData\n      @type Boolean\n      @default false\n      @readonly\n     */\n    hasData: Ember['default'].computed.notEmpty('graphics'),\n\n    /**\n      The x coordinate position of the graph content\n      @property graphX\n      @type Number\n      @readonly\n     */\n    graphX: Ember['default'].computed('paddingLeft', 'yAxis.width', 'yAxis.orient', function () {\n      var paddingLeft = this.get('paddingLeft');\n      var yAxisWidth = this.get('yAxis.width') || 0;\n      var yAxisOrient = this.get('yAxis.orient');\n      if (yAxisOrient === 'right') {\n        return paddingLeft;\n      }\n      return paddingLeft + yAxisWidth;\n    }),\n\n    /** \n      The y coordinate position of the graph content\n      @property graphY\n      @type Number\n      @readonly\n     */\n    graphY: Ember['default'].computed('paddingTop', 'xAxis.orient', 'xAxis.height', function () {\n      var paddingTop = this.get('paddingTop');\n      var xAxisOrient = this.get('xAxis.orient');\n      if (xAxisOrient === 'top') {\n        var xAxisHeight = this.get('xAxis.height') || 0;\n        return xAxisHeight + paddingTop;\n      }\n      return paddingTop;\n    }),\n\n    /**\n      The width, in pixels, of the graph content\n      @property graphWidth\n      @type Number\n      @readonly\n     */\n    graphWidth: Ember['default'].computed('width', 'paddingRight', 'paddingLeft', 'yAxis.width', function () {\n      var paddingRight = this.get('paddingRight') || 0;\n      var paddingLeft = this.get('paddingLeft') || 0;\n      var yAxisWidth = this.get('yAxis.width') || 0;\n      var width = this.get('width') || 0;\n      return Math.max(0, width - paddingRight - paddingLeft - yAxisWidth);\n    }),\n\n    /**\n      The height, in pixels, of the graph content\n      @property graphHeight\n      @type Number\n      @readonly\n     */\n    graphHeight: Ember['default'].computed('height', 'paddingTop', 'paddingBottom', 'xAxis.height', function () {\n      var paddingTop = this.get('paddingTop') || 0;\n      var paddingBottom = this.get('paddingBottom') || 0;\n      var xAxisHeight = this.get('xAxis.height') || 0;\n      var height = this.get('height') || 0;\n      return Math.max(0, height - paddingTop - paddingBottom - xAxisHeight);\n    }),\n\n    /**\n      An SVG transform to position the graph content\n      @property graphTransform\n      @type String\n      @readonly\n     */\n    graphTransform: Ember['default'].computed('graphX', 'graphY', function () {\n      var graphX = this.get('graphX');\n      var graphY = this.get('graphY');\n      return 'translate(' + graphX + ' ' + graphY + ')';\n    }),\n\n    /**\n      Sets `hasRendered` to `true` on `willInsertElement`.\n      @method _notifyHasRendered\n      @private\n    */\n    _notifyHasRendered: Ember['default'].on('willInsertElement', function () {\n      this.set('hasRendered', true);\n    }),\n\n    /**\n      Gets the mouse position relative to the container\n      @method mousePoint\n      @param container {SVGElement} the SVG element that contains the mouse event\n      @param e {Object} the DOM mouse event\n      @return {Array} an array of `[xMouseCoord, yMouseCoord]`\n     */\n    mousePoint: function mousePoint(container, e) {\n      var svg = container.ownerSVGElement || container;\n      if (svg.createSVGPoint) {\n        var point = svg.createSVGPoint();\n        point.x = e.clientX;\n        point.y = e.clientY;\n        point = point.matrixTransform(container.getScreenCTM().inverse());\n        return [point.x, point.y];\n      }\n      var rect = container.getBoundingClientRect();\n      return [e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop];\n    },\n\n    /**\n      A computed property returned the view's controller.\n      @property parentController\n      @type Ember.Controller\n      @readonly\n    */\n    parentController: Ember['default'].computed.alias('templateData.view.controller'),\n\n    /**\n      Selects the graphic passed. If `selectMultiple` is false, it will deselect the currently\n      selected graphic if it's different from the one passed.\n      @method selectGraphic\n      @param graphic {Ember.Component} the graph component to select within the graph.\n    */\n    selectGraphic: function selectGraphic(graphic) {\n      if (!graphic.get('selected')) {\n        graphic.set('selected', true);\n      }\n      if (this.selectMultiple) {\n        this.get('selected').pushObject(graphic);\n      } else {\n        var current = this.get('selected');\n        if (current && current !== graphic) {\n          current.set('selected', false);\n        }\n        this.set('selected', graphic);\n      }\n    },\n\n    /**\n      deselects the graphic passed.\n      @method deselectGraphic\n      @param graphic {Ember.Component} the graph child component to deselect.\n    */\n    deselectGraphic: function deselectGraphic(graphic) {\n      graphic.set('selected', false);\n      if (this.selectMultiple) {\n        this.get('selected').removeObject(graphic);\n      } else {\n        var current = this.get('selected');\n        if (current && current === graphic) {\n          this.set('selected', null);\n        }\n      }\n    },\n\n    /**\n      The initialization method. Fired on `init`.\n      @method _setup\n      @private\n    */\n    init: function init() {\n      this._super.apply(this, arguments);\n      this.set('selected', this.selectMultiple ? Ember['default'].A() : null);\n    },\n\n    /**\n      The amount of leeway, in pixels, to give before triggering a brush start.\n      @property brushThreshold\n      @type {Number}\n      @default 7\n    */\n    brushThreshold: 7,\n\n    /**\n      The name of the action to trigger when brushing starts\n      @property brushStartAction\n      @type {String}\n      @default null\n    */\n    brushStartAction: null,\n\n    /**\n      The name of the action to trigger when brushing emits a new value\n      @property brushAction\n      @type {String}\n      @default null\n    */\n    brushAction: null,\n\n    /**\n      The name of the action to trigger when brushing ends\n      @property brushEndAction\n      @type {String}\n      @default null\n    */\n    brushEndAction: null,\n\n    _setupBrushAction: Ember['default'].on('didInsertElement', function () {\n      var content = this.$('.nf-graph-content');\n\n      var toBrushEventStreams = this._toBrushEventStreams.bind(this);\n      var toComponentEventStream = this._toComponentEventStream;\n      var triggerComponentEvent = this._triggerComponentEvent.bind(this);\n\n      var mouseMoves = Observable.fromEvent(content, 'mousemove');\n      var mouseDowns = Observable.fromEvent(content, 'mousedown');\n      var mouseUps = Observable.fromEvent(Ember['default'].$(document), 'mouseup');\n      var mouseLeaves = Observable.fromEvent(content, 'mouseleave');\n\n      this._brushDisposable = Observable.merge(mouseDowns, mouseMoves, mouseLeaves).\n      // get a streams of mouse events that start on mouse down and end on mouse up\n      window(mouseDowns, function () {\n        return mouseUps;\n      })\n      // filter out all of them if there are no brush actions registered\n      // map the mouse event streams into brush event streams\n      .map(toBrushEventStreams).\n      // flatten to a stream of action names and event objects\n      flatMap(toComponentEventStream).\n      // HACK: this is fairly cosmetic, so skip errors.\n      retry().\n      // subscribe and send the brush actions via Ember\n      forEach(triggerComponentEvent);\n    }),\n\n    _toBrushEventStreams: function _toBrushEventStreams(mouseEvents) {\n      var getStartInfo = this._getStartInfo;\n      var byBrushThreshold = this._byBrushThreshold.bind(this);\n      var toBrushEvent = this._toBrushEvent.bind(this);\n\n      // get the starting mouse event\n      return mouseEvents.take(1).\n      // calculate it's mouse point and info\n      map(getStartInfo).\n      // combine the start with the each subsequent mouse event\n      combineLatest(mouseEvents.skip(1), array_helpers.toArray).\n      // filter out everything until the brushThreshold is crossed\n      filter(byBrushThreshold).\n      // create the brush event object\n      map(toBrushEvent);\n    },\n\n    _triggerComponentEvent: function _triggerComponentEvent(d) {\n      this.trigger(d[0], d[1]);\n    },\n\n    _toComponentEventStream: function _toComponentEventStream(events) {\n      return Observable.merge(events.take(1).map(function (e) {\n        return ['didBrushStart', e];\n      }), events.map(function (e) {\n        return ['didBrush', e];\n      }), events.last().map(function (e) {\n        return ['didBrushEnd', e];\n      }));\n    },\n\n    didBrush: function didBrush(e) {\n      if (this.get('brushAction')) {\n        this.sendAction('brushAction', e);\n      }\n    },\n\n    didBrushStart: function didBrushStart(e) {\n      document.body.style.setProperty('-webkit-user-select', 'none');\n      document.body.style.setProperty('-moz-user-select', 'none');\n      document.body.style.setProperty('user-select', 'none');\n      if (this.get('brushStartAction')) {\n        this.sendAction('brushStartAction', e);\n      }\n    },\n\n    didBrushEnd: function didBrushEnd(e) {\n      document.body.style.removeProperty('-webkit-user-select');\n      document.body.style.removeProperty('-moz-user-select');\n      document.body.style.removeProperty('user-select');\n      if (this.get('brushEndAction')) {\n        this.sendAction('brushEndAction', e);\n      }\n    },\n\n    _toBrushEvent: function _toBrushEvent(d) {\n      var start = d[0];\n      var currentEvent = d[1];\n      var currentPoint = svg_dom.getMousePoint(currentEvent.currentTarget, d[1]);\n\n      var startPosition = GraphPosition['default'].create({\n        originalEvent: start.originalEvent,\n        graph: this,\n        graphX: start.mousePoint.x,\n        graphY: start.mousePoint.y\n      });\n\n      var currentPosition = GraphPosition['default'].create({\n        originalEvent: currentEvent,\n        graph: this,\n        graphX: currentPoint.x,\n        graphY: currentPoint.y\n      });\n\n      var left = startPosition;\n      var right = currentPosition;\n\n      if (start.originalEvent.clientX > currentEvent.clientX) {\n        left = currentPosition;\n        right = startPosition;\n      }\n\n      return {\n        start: startPosition,\n        current: currentPosition,\n        left: left,\n        right: right\n      };\n    },\n\n    _byBrushThreshold: function _byBrushThreshold(d) {\n      var startEvent = d[0].originalEvent;\n      var currentEvent = d[1];\n      return Math.abs(currentEvent.clientX - startEvent.clientX) > this.get('brushThreshold');\n    },\n\n    _getStartInfo: function _getStartInfo(e) {\n      return {\n        originalEvent: e,\n        mousePoint: svg_dom.getMousePoint(e.currentTarget, e)\n      };\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      if (this._brushDisposable) {\n        this._brushDisposable.dispose();\n      }\n    } });\n\n});","define('is-ember-really-fast-yet/components/nf-horizontal-line', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, HasGraphParent, RequireScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'line',\n\n    attributeBindings: ['lineY:y1', 'lineY:y2', 'x1', 'x2'],\n\n    classNames: ['nf-horizontal-line'],\n\n    /**\n      The y domain value at which to draw the horizontal line\n      @property y\n      @type Number\n      @default null\n    */\n    y: null,\n\n    /**\n      The computed y coordinate of the line to draw\n      @property lineY\n      @type Number\n      @private\n      @readonly\n    */\n    lineY: Ember['default'].computed('y', 'yScale', function () {\n      var y = this.get('y');\n      var yScale = this.get('yScale');\n      var py = yScale ? yScale(y) : -1;\n      return py && py > 0 ? py : 0;\n    }),\n\n    /**\n      The left x coordinate of the line\n      @property x1\n      @type Number\n      @default 0\n      @private\n    */\n    x1: 0,\n\n    /**\n      The right x coordinate of the line\n      @property x2\n      @type Number\n      @private\n      @readonly\n    */\n    x2: Ember['default'].computed.alias('graph.graphWidth') });\n\n});","define('is-ember-really-fast-yet/components/nf-line', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-data-graphic', 'ember-nf-graph/mixins/graph-line-utils', 'ember-nf-graph/mixins/graph-selectable-graphic', 'ember-nf-graph/mixins/graph-registered-graphic', 'ember-nf-graph/mixins/graph-graphic-with-tracking-dot', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, HasGraphParent, DataGraphic, LineUtils, SelectableGraphic, RegisteredGraphic, GraphicWithTrackingDot, RequireScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], DataGraphic['default'], SelectableGraphic['default'], LineUtils['default'], RegisteredGraphic['default'], GraphicWithTrackingDot['default'], RequireScaleSource['default'], {\n\n    tagName: 'g',\n\n    /**\n      The type of D3 interpolator to use to create the line.\n      @property interpolator\n      @type String\n      @default 'linear'\n    */\n    interpolator: 'linear',\n\n    classNameBindings: ['selected', 'selectable'],\n\n    classNames: ['nf-line'],\n\n    /**\n      The d3 line function to create the line path.\n      @method lineFn\n      @param data {Array} the array of coordinate arrays to plot as an SVG path\n      @private\n      @return {String} an SVG path data string\n    */\n    lineFn: Ember['default'].computed('xScale', 'yScale', 'interpolator', function () {\n      var xScale = this.get('xScale');\n      var yScale = this.get('yScale');\n      var interpolator = this.get('interpolator');\n      return this.createLineFn(xScale, yScale, interpolator);\n    }),\n\n    /**\n      The SVG path data string to render the line\n      @property d\n      @type String\n      @private\n      @readonly\n    */\n    d: Ember['default'].computed('renderedData.@each', 'lineFn', function () {\n      var renderedData = this.get('renderedData');\n      var lineFn = this.get('lineFn');\n      return lineFn(renderedData);\n    }),\n\n    /**\n      Event handler to toggle the `selected` property on click\n      @method _toggleSelected\n      @private\n    */\n    _toggleSelected: Ember['default'].on('click', function () {\n      if (this.get('selectable')) {\n        this.toggleProperty('selected');\n      }\n    }) });\n\n});","define('is-ember-really-fast-yet/components/nf-plot', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'ember-nf-graph/utils/nf/graph-event'], function (exports, Ember, HasGraphParent, RequireScaleSource, GraphEvent) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'g',\n\n    attributeBindings: ['transform'],\n\n    classNames: ['nf-plot'],\n\n    /**\n      The x domain value to set the plot at\n      @property x\n      @default null\n    */\n    x: null,\n\n    /**\n      The y domain value to set the plot at\n      @property x\n      @default null\n    */\n    y: null,\n\n    /**\n      True if an `x` value is present (defined, not null and non-empty)\n      @property hasX\n      @type Boolean\n      @readonly\n    */\n    hasX: Ember['default'].computed.notEmpty('x'),\n\n    /**\n      True if an `y` value is present (defined, not null and non-empty)\n      @property hasY\n      @type Boolean\n      @readonly\n    */\n    hasY: Ember['default'].computed.notEmpty('y'),\n\n    /**\n      The calculated visibility of the component\n      @property isVisible\n      @type Boolean\n      @readonly\n    */\n    isVisible: Ember['default'].computed.and('hasX', 'hasY'),\n\n    /**\n      The calculated x coordinate\n      @property rangeX\n      @type Number\n      @readonly\n    */\n    rangeX: Ember['default'].computed('x', 'xScale', function () {\n      var xScale = this.get('xScale');\n      var x = this.get('x');\n      var hasX = this.get('hasX');\n      return (hasX && xScale ? xScale(x) : 0) || 0;\n    }),\n\n    /**\n      The calculated y coordinate\n      @property rangeY\n      @type Number\n      @readonly\n    */\n    rangeY: Ember['default'].computed('y', 'yScale', function () {\n      var yScale = this.get('yScale');\n      var y = this.get('y');\n      var hasY = this.get('hasY');\n      return (hasY && yScale ? yScale(y) : 0) || 0;\n    }),\n\n    /**\n      The SVG transform of the component's `<g>` tag.\n      @property transform\n      @type String\n      @readonly\n    */\n    transform: Ember['default'].computed('rangeX', 'rangeY', function () {\n      var rangeX = this.get('rangeX');\n      var rangeY = this.get('rangeY');\n      return 'translate(' + rangeX + ' ' + rangeY + ')';\n    }),\n\n    data: null,\n\n    click: function click(e) {\n      var context = GraphEvent['default'].create({\n        x: this.get('x'),\n        y: this.get('y'),\n        data: this.get('data'),\n        source: this,\n        graph: this.get('graph'),\n        originalEvent: e });\n      this.sendAction('action', context);\n    } });\n\n});","define('is-ember-really-fast-yet/components/nf-plots', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-data-graphic', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, HasGraphParent, DataGraphic, RequireScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], DataGraphic['default'], RequireScaleSource['default'], {\n    tagName: 'g',\n\n    classNames: ['nf-plots'],\n\n    /**\n      The parent controller to use for template binding\n      @property parentController\n      @type Ember.Controller\n      @readonly\n      @private\n    */\n    parentController: Ember['default'].computed.alias('templateData.view.controller'),\n\n    /**\n      The model for adding plots to the graph\n      @property plotData\n      @readonly\n      @private\n    */\n    plotData: Ember['default'].computed('renderedData.@each', function () {\n      var renderedData = this.get('renderedData');\n      if (renderedData && Ember['default'].isArray(renderedData)) {\n        return Ember['default'].A(renderedData.map(function (d) {\n          return {\n            x: d[0],\n            y: d[1],\n            data: d.data };\n        }));\n      }\n    }),\n\n    actions: {\n      itemClicked: function itemClicked(e) {\n        this.sendAction('action', e);\n      } } });\n\n});","define('is-ember-really-fast-yet/components/nf-range-marker', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, HasGraphParent, RequireScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'g',\n\n    attributeBindings: ['transform'],\n\n    classNames: ['nf-range-marker'],\n\n    /**\n      The parent `nf-range-markers` component.\n      @property container\n      @type {components.nf-range-markers}\n      @default null\n    */\n    container: null,\n\n    /**\n      The minimum domain value for the range to mark.\n      @property xMin\n      @default 0\n    */\n    xMin: 0,\n\n    /**\n      The maximum domain value for the range to mark.\n      @property xMax\n      @default 0\n    */\n    xMax: 0,\n\n    /**\n      The spacing above the range marker.\n      @property marginTop\n      @type Number\n      @default 10\n    */\n    marginTop: 10,\n\n    /**\n      The spacing below the range marker.\n      @property marginBottom\n      @type Number\n      @default 3\n    */\n    marginBottom: 3,\n\n    /**\n      The height of the range marker.\n      @property height\n      @type Number\n      @default 10\n    */\n    height: 10,\n\n    /**\n      The computed x position of the range marker.\n      @property x\n      @type Number\n      @readonly\n    */\n    x: Ember['default'].computed('xMin', 'xScale', function () {\n      var xScale = this.get('xScale');\n      var xMin = this.get('xMin');\n      return xScale(xMin);\n    }),\n\n    /**\n      The computed width of the range marker.\n      @property width\n      @type Number\n      @readonly\n    */\n    width: Ember['default'].computed('xScale', 'xMin', 'xMax', function () {\n      var xScale = this.get('xScale');\n      var xMax = this.get('xMax');\n      var xMin = this.get('xMin');\n      return xScale(xMax) - xScale(xMin);\n    }),\n\n    /**\n      The computed y position of the range marker.\n      @property y\n      @type Number\n      @readonly\n    */\n    y: Ember['default'].computed('container.orient', 'prevMarker.bottom', 'prevMarker.y', 'graph.graphHeight', 'totalHeight', function () {\n      var orient = this.get('container.orient');\n      var prevBottom = this.get('prevMarker.bottom');\n      var prevY = this.get('prevMarker.y');\n      var graphHeight = this.get('graph.graphHeight');\n      var totalHeight = this.get('totalHeight');\n\n      prevBottom = prevBottom || 0;\n\n      if (orient === 'bottom') {\n        return (prevY || graphHeight) - totalHeight;\n      }\n\n      if (orient === 'top') {\n        return prevBottom;\n      }\n    }),\n\n    /**\n      The computed total height of the range marker including its margins.\n      @property totalHeight\n      @type Number\n      @readonly\n    */\n    totalHeight: Ember['default'].computed('height', 'marginTop', 'marginBottom', function () {\n      var height = this.get('height');\n      var marginTop = this.get('marginTop');\n      var marginBottom = this.get('marginBottom');\n      return height + marginTop + marginBottom;\n    }),\n\n    /**\n      The computed bottom of the range marker, not including the bottom margin.\n      @property bottom\n      @type Number\n      @readonly\n    */\n    bottom: Ember['default'].computed('y', 'totalHeight', function () {\n      var y = this.get('y');\n      var totalHeight = this.get('totalHeight');\n      return y + totalHeight;\n    }),\n\n    /**\n      The computed SVG transform of the range marker container\n      @property transform\n      @type String\n      @readonly\n    */\n    transform: Ember['default'].computed('y', function () {\n      var y = this.get('y') || 0;\n      return 'translate(0 ' + y + ')';\n    }),\n\n    /**\n      The computed SVG transform fo the range marker label container.\n      @property labelTransform\n      @type String\n      @readonly\n    */\n    labelTransform: Ember['default'].computed('x', function () {\n      var x = this.get('x') || 0;\n      return 'translate(' + x + ' 0)';\n    }),\n\n    /**\n      Initialization function that registers the range marker with its parent \n      and populates the container property\n      @method _setup\n      @private\n    */\n    init: function init() {\n      this._super.apply(this, arguments);\n      var container = this.nearestWithProperty('isRangeMarkerContainer');\n      container.registerMarker(this);\n      this.set('container', container);\n    },\n\n    /**\n      Unregisters the range marker from its parent when the range marker is destroyed.\n      @method _unregister\n      @private\n    */\n    _unregister: Ember['default'].on('willDestroyElement', function () {\n      this.get('container').unregisterMarker(this);\n    })\n  });\n\n});","define('is-ember-really-fast-yet/components/nf-range-markers', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent'], function (exports, Ember, HasGraphParent) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], {\n    tagName: 'g',\n\n    /**\n      Used by `nf-range-marker` to identify the `nf-range-markers` container\n      @property isRangeMarkerContainer\n      @type Boolean\n      @default true\n      @readonly\n    */\n    isRangeMarkerContainer: true,\n\n    /**\n      Sets the orientation of the range markers.\n       - `'bottom'` - Range markers start at the bottom and stack upward\n      - `'top'` - Range markers start at the top and stack downward\n      @property orient\n      @type String\n      @default 'bottom'\n    */\n    orient: 'bottom',\n\n    /**\n      The margin, in pixels, between the markers\n      @property markerMargin\n      @type Number\n      @default 10\n    */\n    markerMargin: 10,\n\n    /**\n      The marker components registered with this container\n      @property markers\n      @type Array\n      @readonly\n    */\n    markers: Ember['default'].computed(function () {\n      return Ember['default'].A();\n    }),\n\n    /**\n      Adds the passed marker to the `markers` list, and sets the `prevMarker` and `nextMarker`\n      properties on the marker component and it's neighbor.\n      @method registerMarker\n      @param marker {nf-range-marker} the range marker to register with this container\n    */\n    registerMarker: function registerMarker(marker) {\n      var markers = this.get('markers');\n      var prevMarker = markers[markers.length - 1];\n\n      if (prevMarker) {\n        marker.set('prevMarker', prevMarker);\n        prevMarker.set('nextMarker', marker);\n      }\n\n      markers.pushObject(marker);\n    },\n\n    /**\n      Removes the marker from the `markers` list. Also updates the `nextMarker` and `prevMarker`\n      properties of it's neighboring components.\n      @method unregisterMarker\n      @param marker {nf-range-marker} the range marker to remove from the `markers` list.\n    */\n    unregisterMarker: function unregisterMarker(marker) {\n      if (marker) {\n        var next = marker.nextMarker;\n        var prev = marker.prevMarker;\n        if (prev) {\n          prev.set('nextMarker', next);\n        }\n        if (next) {\n          next.set('prevMarker', prev);\n        }\n        this.get('markers').removeObject(marker);\n      }\n    } });\n\n});","define('is-ember-really-fast-yet/components/nf-right-tick', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, HasGraphParent, RequireScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'g',\n\n    classNames: ['nf-right-tick'],\n\n    /**\n      The transition duration in milliseconds\n      @property duration\n      @type Number\n      @default 400\n    */\n    duration: 400,\n\n    /**\n      The domain value at which to place the tick\n      @property value\n      @type Number\n      @default null\n    */\n    value: null,\n\n    /**\n      Sets the visibility of the component. Returns false if `y` is not \n      a numeric data type.\n      @property isVisible\n      @private\n      @readonly\n    */\n    isVisible: Ember['default'].computed('y', function () {\n      return !isNaN(this.get('y'));\n    }),\n\n    /**\n      The calculated y coordinate of the tick\n      @property y\n      @type Number\n      @readonly\n    */\n    y: Ember['default'].computed('value', 'yScale', 'graph.paddingTop', function () {\n      var value = this.get('value');\n      var yScale = this.get('yScale');\n      var paddingTop = this.get('graph.paddingTop');\n      var vy = 0;\n      if (yScale) {\n        vy = yScale(value) || 0;\n      }\n      return vy + paddingTop;\n    }),\n\n    /**\n      The SVG transform used to render the tick\n      @property transform\n      @type String\n      @private\n      @readonly\n    */\n    transform: Ember['default'].computed('y', 'graph.width', function () {\n      var y = this.get('y');\n      var graphWidth = this.get('graph.width');\n      var x0 = graphWidth - 6;\n      var y0 = y - 3;\n      return 'translate(' + x0 + ' ' + y0 + ')';\n    }),\n\n    /**\n      performs the D3 transition to move the tick to the proper position.\n      @method _transitionalUpdate\n      @private\n    */\n    _transitionalUpdate: function _transitionalUpdate() {\n      var transform = this.get('transform');\n      var path = this.get('path');\n      var duration = this.get('duration');\n      path.transition().duration(duration).attr('transform', transform);\n    },\n\n    /**\n      Schedules the transition when `value` changes on on init.\n      @method _triggerTransition\n      @private\n    */\n    _triggerTransition: Ember['default'].on('init', Ember['default'].observer('value', function () {\n      Ember['default'].run.scheduleOnce('afterRender', this, this._transitionalUpdate);\n    })),\n\n    /**\n      Updates the tick position without a transition.\n      @method _nonTransitionalUpdate\n      @private\n    */\n    _nonTransitionalUpdate: function _nonTransitionalUpdate() {\n      var transform = this.get('transform');\n      var path = this.get('path');\n      path.attr('transform', transform);\n    },\n\n    /**\n      Schedules the update of non-transitional positions\n      @method _triggerNonTransitionalUpdate\n      @private\n    */\n    _triggerNonTransitionalUpdate: Ember['default'].observer('graph.width', function () {\n      Ember['default'].run.scheduleOnce('afterRender', this, this._nonTransitionalUpdate);\n    }),\n\n    /**\n      Gets the elements required to do the d3 transitions\n      @method _getElements\n      @private\n    */\n    _getElements: Ember['default'].on('didInsertElement', function () {\n      var g = d3.select(this.$()[0]);\n      var path = g.selectAll('path').data([0]);\n      this.set('path', path);\n    })\n  });\n\n});","define('is-ember-really-fast-yet/components/nf-selection-box', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'ember-nf-graph/utils/nf/scale-utils'], function (exports, Ember, HasGraphParent, RequireScaleSource, scale_utils) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'g',\n\n    /**\n      The duration of the transition in ms\n      @property duration\n      @type Number\n      @default 400\n    */\n    duration: 400,\n\n    /**\n      The minimum x domain value to encompass.\n      @property xMin\n      @default null\n    */\n    xMin: null,\n\n    /**\n      The maximum x domain value to encompoass.\n      @property xMax\n      @default null\n    */\n    xMax: null,\n\n    /**\n      The minimum y domain value to encompass.\n      @property yMin\n      @default null\n    */\n    yMin: null,\n\n    /** \n      The maximum y domain value to encompass\n      @property yMax\n      @default null\n    */\n    yMax: null,\n\n    classNames: ['nf-selection-box'],\n\n    /**\n      The x pixel position of xMin\n      @property x0\n      @type Number\n    */\n    x0: Ember['default'].computed('xMin', 'xScale', function () {\n      return scale_utils.normalizeScale(this.get('xScale'), this.get('xMin'));\n    }),\n\n    /**\n      The x pixel position of xMax\n      @property x1\n      @type Number\n    */\n    x1: Ember['default'].computed('xMax', 'xScale', function () {\n      return scale_utils.normalizeScale(this.get('xScale'), this.get('xMax'));\n    }),\n\n    /**\n      The y pixel position of yMin\n      @property y0\n      @type Number\n    */\n    y0: Ember['default'].computed('yMin', 'yScale', function () {\n      return scale_utils.normalizeScale(this.get('yScale'), this.get('yMin'));\n    }),\n\n    /**\n      The y pixel position of yMax\n      @property y1\n      @type Number\n    */\n    y1: Ember['default'].computed('yMax', 'yScale', function () {\n      return scale_utils.normalizeScale(this.get('yScale'), this.get('yMax'));\n    }),\n\n    /**\n      The SVG path string for the box's rectangle.\n      @property rectPath\n      @type String\n    */\n    rectPath: Ember['default'].computed('x0', 'x1', 'y0', 'y1', function () {\n      var x0 = this.get('x0');\n      var x1 = this.get('x1');\n      var y0 = this.get('y0');\n      var y1 = this.get('y1');\n      return 'M' + x0 + ',' + y0 + ' L' + x0 + ',' + y1 + ' L' + x1 + ',' + y1 + ' L' + x1 + ',' + y0 + ' L' + x0 + ',' + y0;\n    }),\n\n    /**\n      Updates the position of the box with a transition\n      @method doUpdatePosition\n    */\n    doUpdatePosition: function doUpdatePosition() {\n      var boxRect = this.get('boxRectElement');\n      var rectPath = this.get('rectPath');\n      var duration = this.get('duration');\n\n      boxRect.transition().duration(duration).attr('d', rectPath);\n    },\n\n    doUpdatePositionStatic: function doUpdatePositionStatic() {\n      var boxRect = this.get('boxRectElement');\n      var rectPath = this.get('rectPath');\n\n      boxRect.attr('d', rectPath);\n    },\n\n    /**\n      Schedules an update to the position of the box after render.\n      @method updatePosition\n      @private\n    */\n    updatePosition: Ember['default'].observer('xMin', 'xMax', 'yMin', 'yMax', function () {\n      Ember['default'].run.once(this, this.doUpdatePosition);\n    }),\n\n    staticPositionChange: Ember['default'].on('didInsertElement', Ember['default'].observer('xScale', 'yScale', function () {\n      Ember['default'].run.once(this, this.doUpdatePositionStatic);\n    })),\n\n    /**\n      Sets up the required d3 elements after component\n      is inserted into the DOM\n      @method didInsertElement\n    */\n    didInsertElement: function didInsertElement() {\n      var element = this.get('element');\n      var g = d3.select(element);\n      var boxRect = g.append('path').attr('class', 'nf-selection-box-rect').attr('d', this.get('rectPath'));\n\n      this.set('boxRectElement', boxRect);\n    } });\n\n});","define('is-ember-really-fast-yet/components/nf-svg-image', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'ember-nf-graph/utils/nf/scale-utils', 'ember-nf-graph/mixins/graph-selectable-graphic'], function (exports, Ember, HasGraphParent, RequiresScaleSource, scale_utils, SelectableGraphic) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequiresScaleSource['default'], SelectableGraphic['default'], {\n    tagName: 'image',\n\n    classNameBindings: [':nf-svg-image', 'selectable', 'selected'],\n\n    //HACK: for now xlink:href needs to be bound elsewhere.\n    attributeBindings: ['svgX:x', 'svgY:y', 'svgWidth:width', 'svgHeight:height'],\n\n    click: function click() {\n      if (this.get('selectable')) {\n        this.toggleProperty('selected');\n      }\n    },\n\n    /**\n      The domain x value to place the image at.\n      @property x\n      @default null\n    */\n    x: null,\n\n    /**\n      The domain y value to place the image at.\n      @property y\n      @default null\n    */\n    y: null,\n\n    _width: 0,\n\n    /**\n      The width as a domain value. Does not handle ordinal\n      scales. To set a pixel value, set `svgWidth` directly.\n      @property width\n      @type Number\n      @default 0\n    */\n    width: Ember['default'].computed(function (key, value) {\n      if (arguments.length > 1) {\n        this._width = Math.max(0, +value) || 0;\n      }\n      return this._width;\n    }),\n\n    _height: 0,\n\n    /**\n      The height as a domain value. Does not \n      handle ordinal scales. To set a pixel value, just\n      set `svgHeight` directly.\n      @property height\n      @default null\n    */\n    height: Ember['default'].computed(function (key, value) {\n      if (arguments.length > 1) {\n        this._height = Math.max(0, +value) || 0;\n      }\n      return this._height;\n    }),\n\n    /**\n      The image source url\n      @property src\n      @type String\n    */\n    src: Ember['default'].computed(function (key, value) {\n      //HACK: because attributeBindings doesn't currently work with namespaced attributes.\n      var $elem = this.$();\n      if (arguments.length > 1) {\n        $elem.attr('xlink:href', value);\n      }\n      return $elem.attr('xlink:href');\n    }),\n\n    x0: Ember['default'].computed('x', 'xScale', function () {\n      return scale_utils.normalizeScale(this.get('xScale'), this.get('x'));\n    }),\n\n    y0: Ember['default'].computed('y', 'yScale', function () {\n      return scale_utils.normalizeScale(this.get('yScale'), this.get('y'));\n    }),\n\n    x1: Ember['default'].computed('xScale', 'width', 'x', function () {\n      var scale = this.get('xScale');\n      if (scale.rangeBands) {\n        throw new Error('nf-image does not support ordinal scales');\n      }\n      return scale_utils.normalizeScale(scale, this.get('width') + this.get('x'));\n    }),\n\n    y1: Ember['default'].computed('yScale', 'height', 'y', function () {\n      var scale = this.get('yScale');\n      if (scale.rangeBands) {\n        throw new Error('nf-image does not support ordinal scales');\n      }\n      return scale_utils.normalizeScale(scale, this.get('height') + this.get('y'));\n    }),\n\n    /**\n      The pixel value at which to plot the image.\n      @property svgX\n      @type Number\n    */\n    svgX: Ember['default'].computed('x0', 'x1', function () {\n      return Math.min(this.get('x0'), this.get('x1'));\n    }),\n\n    /**\n      The pixel value at which to plot the image.\n      @property svgY\n      @type Number\n    */\n    svgY: Ember['default'].computed('y0', 'y1', function () {\n      return Math.min(this.get('y0'), this.get('y1'));\n    }),\n\n    /**\n      The width, in pixels, of the image.\n      @property svgWidth\n      @type Number\n    */\n    svgWidth: Ember['default'].computed('x0', 'x1', function () {\n      return Math.abs(this.get('x0') - this.get('x1'));\n    }),\n\n    /**\n      The height, in pixels of the image.\n      @property svgHeight\n      @type Number\n    */\n    svgHeight: Ember['default'].computed('y0', 'y1', function () {\n      return Math.abs(this.get('y0') - this.get('y1'));\n    }) });\n\n});","define('is-ember-really-fast-yet/components/nf-svg-line', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'ember-nf-graph/utils/nf/scale-utils', 'ember-nf-graph/mixins/graph-selectable-graphic'], function (exports, Ember, HasGraphParent, RequiresScaleSource, scale_utils, SelectableGraphic) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequiresScaleSource['default'], SelectableGraphic['default'], {\n    tagName: 'line',\n\n    classNameBindings: [':nf-svg-line', 'selectable', 'selected'],\n\n    attributeBindings: ['svgX1:x1', 'svgX2:x2', 'svgY1:y1', 'svgY2:y2'],\n\n    click: function click() {\n      if (this.get('selectable')) {\n        this.toggleProperty('selected');\n      }\n    },\n\n    /**\n      The domain value to plot the SVGLineElement's x1 at.\n      @property x1\n      @default null\n    */\n    x1: null,\n\n    /**\n      The domain value to plot the SVGLineElement's x2 at.\n      @property x2\n      @default null\n    */\n    x2: null,\n\n    /**\n      The domain value to plot the SVGLineElement's y1 at.\n      @property y1\n      @default null\n    */\n    y1: null,\n\n    /**\n      The domain value to plot the SVGLineElement's y2 at.\n      @property y2\n      @default null\n    */\n    y2: null,\n\n    /**\n      The pixel value to plot the SVGLineElement's x1 at.\n      @property svgX1\n      @type Number\n    */\n    svgX1: Ember['default'].computed('x1', 'xScale', function () {\n      return scale_utils.normalizeScale(this.get('xScale'), this.get('x1'));\n    }),\n\n    /**\n      The pixel value to plot the SVGLineElement's x2 at.\n      @property svgX2\n      @type Number\n    */\n    svgX2: Ember['default'].computed('x2', 'xScale', function () {\n      return scale_utils.normalizeScale(this.get('xScale'), this.get('x2'));\n    }),\n\n    /**\n      The pixel value to plot the SVGLineElement's y1 at.\n      @property svgY1\n      @type Number\n    */\n    svgY1: Ember['default'].computed('y1', 'yScale', function () {\n      return scale_utils.normalizeScale(this.get('yScale'), this.get('y1'));\n    }),\n\n    /**\n      The pixel value to plot the SVGLineElement's y2 at.\n      @property svgY2\n      @type Number\n    */\n    svgY2: Ember['default'].computed('y2', 'yScale', function () {\n      return scale_utils.normalizeScale(this.get('yScale'), this.get('y2'));\n    }) });\n\n});","define('is-ember-really-fast-yet/components/nf-svg-path', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'ember-nf-graph/utils/nf/scale-utils', 'ember-nf-graph/mixins/graph-selectable-graphic'], function (exports, Ember, HasGraphParent, RequiresScaleSource, scale_utils, SelectableGraphic) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequiresScaleSource['default'], SelectableGraphic['default'], {\n    type: 'path',\n\n    classNameBindings: [':nf-svg-path', 'selectable', 'selected'],\n\n    attributeBindings: ['d'],\n\n    /**\n      The array of points to use to plot the path. This is an array of arrays, in the following format:\n             // specify path pen commands\n            [\n              [50, 50, 'L'],\n              [100, 100, 'L']\n            ]\n             // or they will default to 'L'\n            [\n              [50, 50],\n              [100, 100]\n            ]\n     @property points\n    @type Array\n    */\n    points: null,\n\n    /**\n      The data points mapped to scale\n      @property svgPoints\n      @type Array\n    */\n    svgPoints: Ember['default'].computed('points.[]', 'xScale', 'yScale', function () {\n      var points = this.get('points');\n      var xScale = this.get('xScale');\n      var yScale = this.get('yScale');\n      if (Ember['default'].isArray(points) && points.length > 0) {\n        return points.map(function (v) {\n          var dx = scale_utils.normalizeScale(xScale, v[0]);\n          var dy = scale_utils.normalizeScale(yScale, v[1]);\n          var c = v.length > 2 ? v[2] : 'L';\n          return [dx, dy, c];\n        });\n      }\n    }),\n\n    click: function click() {\n      if (this.get('selectable')) {\n        this.toggleProperty('selected');\n      }\n    },\n\n    /**\n      The raw svg path d attribute output\n      @property d\n      @type String\n    */\n    d: Ember['default'].computed('svgPoints', function () {\n      var svgPoints = this.get('svgPoints');\n      if (Ember['default'].isArray(svgPoints) && svgPoints.length > 0) {\n        return svgPoints.reduce(function (d, pt, i) {\n          if (i === 0) {\n            d += 'M' + pt[0] + ',' + pt[1];\n          }\n          d += ' ' + pt[2] + pt[0] + ',' + pt[1];\n          return d;\n        }, '');\n      } else {\n        return 'M0,0';\n      }\n    }) });\n\n});","define('is-ember-really-fast-yet/components/nf-svg-rect', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'ember-nf-graph/utils/nf/scale-utils', 'ember-nf-graph/mixins/graph-selectable-graphic'], function (exports, Ember, HasGraphParent, RequiresScaleSource, scale_utils, SelectableGraphic) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequiresScaleSource['default'], SelectableGraphic['default'], {\n    tagName: 'path',\n\n    attributeBindings: ['d'],\n\n    classNameBindings: [':nf-svg-rect', 'selectable', 'selected'],\n\n    /**\n      The domain x value to place the rect at.\n      @property x\n      @default null\n    */\n    x: null,\n\n    /**\n      The domain y value to place the rect at.\n      @property y\n      @default null\n    */\n    y: null,\n\n    _width: 0,\n\n    /**\n      The width as a domain value. If xScale is ordinal, \n      then this value is the indice offset to which to draw the \n      rectangle. In other words, if it's `2`, then draw the rectangle\n      to two ordinals past whatever `x` is set to.\n      @property width\n      @type Number\n      @default 0\n    */\n    width: Ember['default'].computed(function (key, value) {\n      if (arguments.length > 1) {\n        this._width = +value;\n      }\n      return this._width;\n    }),\n\n    _height: 0,\n\n    /**\n      The height as a domain value. If the yScale is ordinal,\n      this value is the indice offset to which to draw the rectangle.\n      For example, if the height is `3` then draw the rectangle\n      to two ordinals passed whatever `y` is set to.\n      @property height\n      @type Number\n      @default 0\n    */\n    height: Ember['default'].computed(function (key, value) {\n      if (arguments.length > 1) {\n        this._height = +value;\n      }\n      return this._height;\n    }),\n\n    /**\n      The x value of the bottom right corner of the rectangle.\n      @property x1\n      @type Number\n    */\n    x1: Ember['default'].computed('width', 'x', 'xScale', function () {\n      var xScale = this.get('xScale');\n      var w = this.get('width');\n      var x = this.get('x');\n      if (xScale.rangeBands) {\n        var domain = xScale.domain();\n        var fromIndex = domain.indexOf(x);\n        var toIndex = fromIndex + w;\n        return scale_utils.normalizeScale(xScale, domain[toIndex]);\n      } else {\n        x = +x || 0;\n        return scale_utils.normalizeScale(xScale, w + x);\n      }\n    }),\n\n    /**\n      The y value of the bottom right corner of the rectangle\n      @property y1\n      @type Number\n    */\n    y1: Ember['default'].computed('height', 'y', 'yScale', function () {\n      var yScale = this.get('yScale');\n      var h = this.get('height');\n      var y = this.get('y');\n      if (yScale.rangeBands) {\n        var domain = yScale.domain();\n        var fromIndex = domain.indexOf(y);\n        var toIndex = fromIndex + h;\n        return scale_utils.normalizeScale(yScale, domain[toIndex]);\n      } else {\n        y = +y || 0;\n        return scale_utils.normalizeScale(yScale, h + y);\n      }\n    }),\n\n    /**\n      The x value of the top right corner of the rectangle\n      @property x0\n      @type Number\n    */\n    x0: Ember['default'].computed('x', 'xScale', function () {\n      return scale_utils.normalizeScale(this.get('xScale'), this.get('x'));\n    }),\n\n    /**\n      The y value of the top right corner of the rectangle.\n      @property y0\n      @type Number\n    */\n    y0: Ember['default'].computed('y', 'yScale', function () {\n      return scale_utils.normalizeScale(this.get('yScale'), this.get('y'));\n    }),\n\n    /**\n      The SVG path data for the rectangle\n      @property d\n      @type String\n    */\n    d: Ember['default'].computed('x0', 'y0', 'x1', 'y1', function () {\n      var x0 = this.get('x0');\n      var y0 = this.get('y0');\n      var x1 = this.get('x1');\n      var y1 = this.get('y1');\n      return 'M' + x0 + ',' + y0 + ' L' + x0 + ',' + y1 + ' L' + x1 + ',' + y1 + ' L' + x1 + ',' + y0 + ' L' + x0 + ',' + y0;\n    }),\n\n    /**\n      Click event handler. Toggles selected if selectable.\n      @method click\n    */\n    click: function click() {\n      if (this.get('selectable')) {\n        this.toggleProperty('selected');\n      }\n    }\n  });\n\n});","define('is-ember-really-fast-yet/components/nf-vertical-line', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source'], function (exports, Ember, HasGraphParent, RequireScaleSource) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'line',\n\n    classNames: ['nf-vertical-line'],\n\n    attributeBindings: ['lineX:x1', 'lineX:x2', 'y1', 'y2'],\n\n    /**\n      The top y coordinate of the line\n      @property y1\n      @type Number\n      @default 0\n      @private\n    */\n    y1: 0,\n\n    /**\n      The bottom y coordinate of the line\n      @property y2\n      @type Number\n      @private\n      @readonly\n    */\n    y2: Ember['default'].computed.alias('graph.graphHeight'),\n\n    /**\n      The x domain value at which to draw the vertical line on the graph\n      @property x\n      @type Number\n      @default null\n    */\n    x: null,\n\n    /**\n      The calculated x coordinate of the vertical line\n      @property lineX\n      @type Number\n      @private\n      @readonly\n    */\n    lineX: Ember['default'].computed('xScale', 'x', function () {\n      var xScale = this.get('xScale');\n      var x = this.get('x');\n      var px = xScale ? xScale(x) : -1;\n      return px && px > 0 ? px : 0;\n    }) });\n\n});","define('is-ember-really-fast-yet/components/nf-x-axis', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'is-ember-really-fast-yet/templates/components/nf-x-axis'], function (exports, Ember, HasGraphParent, RequireScaleSource, layout) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'g',\n\n    layout: layout['default'],\n    template: null,\n\n    useDefaultTemplate: Ember['default'].computed.equal('template', null),\n\n    attributeBindings: ['transform'],\n    classNameBindings: ['orientClass'],\n    classNames: ['nf-x-axis'],\n\n    /**\n      The height of the x axis in pixels.\n      @property height\n      @type Number\n      @default 20\n    */\n    height: 20,\n\n    /**\n      The number of ticks to display\n      @property tickCount\n      @type Number\n      @default 12\n    */\n    tickCount: 12,\n\n    /**\n      The length of the tick line (the small vertical line indicating the tick)\n      @property tickLength\n      @type Number\n      @default 0\n    */\n    tickLength: 0,\n\n    /**\n      The spacing between the end of the tick line and the origin of the templated\n      tick content\n      @property tickPadding\n      @type Number\n      @default 5\n    */\n    tickPadding: 5,\n\n    /**\n      The orientation of the x axis. Value can be `'top'` or `'bottom'`.\n      @property orient\n      @type String\n      @default 'bottom'\n    */\n    orient: 'bottom',\n\n    _tickFilter: null,\n\n    /**\n      An optional filtering function to allow more control over what tick marks are displayed.\n      The function should have exactly the same signature as the function you'd use for an\n      `Array.prototype.filter()`.\n       @property tickFilter\n      @type Function\n      @default null\n      @example\n             {{#nf-x-axis tickFilter=myFilter}}\n              <text>{{tick.value}}</text>\n            {{/nf-x-axis}}\n       And on your controller:\n             myFilter: function(tick, index, ticks) {\n              return tick.value < 1000;\n            },\n       The above example will filter down the set of ticks to only those that are less than 1000.\n    */\n    tickFilter: Ember['default'].computed.alias('_tickFilter'),\n\n    /**\n      The class applied due to orientation (e.g. `'orient-top'`)\n      @property orientClass\n      @type String\n      @readonly\n    */\n    orientClass: Ember['default'].computed('orient', function () {\n      return 'orient-' + this.get('orient');\n    }),\n\n    /**\n      The SVG Transform applied to this component's container.\n      @property transform\n      @type String\n      @readonly\n    */\n    transform: Ember['default'].computed('x', 'y', function () {\n      var x = this.get('x') || 0;\n      var y = this.get('y') || 0;\n      return 'translate(' + x + ' ' + y + ')';\n    }),\n\n    /**\n      The y position of this component's container.\n      @property y\n      @type Number\n      @readonly\n    */\n    y: Ember['default'].computed('orient', 'graph.paddingTop', 'graph.paddingBottom', 'graph.height', 'height', function () {\n      var orient = this.get('orient');\n      var graphHeight = this.get('graph.height');\n      var height = this.get('height');\n      var paddingBottom = this.get('graph.paddingBottom');\n      var paddingTop = this.get('graph.paddingTop');\n      var y;\n\n      if (orient === 'bottom') {\n        y = graphHeight - paddingBottom - height;\n      } else {\n        y = paddingTop;\n      }\n\n      return y || 0;\n    }),\n\n    /**\n      This x position of this component's container\n      @property x\n      @type Number\n      @readonly\n    */\n    x: Ember['default'].computed('graph.graphX', function () {\n      return this.get('graph.graphX') || 0;\n    }),\n\n    init: function init() {\n      this._super.apply(this, arguments);\n      this.set('graph.xAxis', this);\n      Ember['default'].deprecate('Non-block form of tick is deprecated. Please add `as |tick|` to your template.', this.get('template.blockParams'));\n    },\n\n    /**\n      The width of the component\n      @property width\n      @type Number\n      @readonly\n    */\n    width: Ember['default'].computed.alias('graph.graphWidth'),\n\n    tickData: Ember['default'].computed('xScale', 'graph.xScaleType', 'uniqueXData', 'tickCount', function () {\n      if (this.get('graph.xScaleType') === 'ordinal') {\n        return this.get('uniqueXData');\n      } else {\n        return this.get('xScale').ticks(this.get('tickCount'));\n      }\n    }),\n\n    /**\n      A unique set of all x data on the graph\n      @property uniqueXData\n      @type Array\n      @readonly\n    */\n    uniqueXData: Ember['default'].computed.uniq('graph.xData'),\n\n    /**\n      The models for the ticks to display on the axis.\n      @property ticks\n      @type Array\n      @readonly\n    */\n    ticks: Ember['default'].computed('xScale', 'tickPadding', 'tickLength', 'height', 'orient', 'tickFilter', 'tickData', 'graph.xScaleType', function () {\n      var xScale = this.get('xScale');\n      var xScaleType = this.get('graph.xScaleType');\n      var tickPadding = this.get('tickPadding');\n      var tickLength = this.get('tickLength');\n      var height = this.get('height');\n      var orient = this.get('orient');\n      var tickFilter = this.get('tickFilter');\n      var ticks = this.get('tickData');\n      var y1 = orient === 'top' ? height : 0;\n      var y2 = y1 + tickLength;\n      var labely = orient === 'top' ? y1 - tickPadding : y1 + tickPadding;\n      var halfBandWidth = xScaleType === 'ordinal' ? xScale.rangeBand() / 2 : 0;\n      var result = ticks.map(function (tick) {\n        return {\n          value: tick,\n          x: xScale(tick) + halfBandWidth,\n          y1: y1,\n          y2: y2,\n          labely: labely\n        };\n      });\n\n      if (tickFilter) {\n        result = result.filter(tickFilter);\n      }\n\n      return Ember['default'].A(result);\n    }),\n\n    /**\n      The y position, in pixels, of the axis line\n      @property axisLineY\n      @type Number\n      @readonly\n    */\n    axisLineY: Ember['default'].computed('orient', 'height', function () {\n      var orient = this.get('orient');\n      var height = this.get('height');\n      return orient === 'top' ? height : 0;\n    })\n\n  });\n\n});","define('is-ember-really-fast-yet/components/nf-y-axis', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'is-ember-really-fast-yet/templates/components/nf-y-axis'], function (exports, Ember, HasGraphParent, RequireScaleSource, layout) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'g',\n\n    layout: layout['default'],\n    template: null,\n\n    useDefaultTemplate: Ember['default'].computed.equal('template', null),\n\n    /**\n      The number of ticks to display\n      @property tickCount\n      @type Number\n      @default 5\n    */\n    tickCount: 5,\n\n    /**\n      The length of the tick's accompanying line.\n      @property tickLength\n      @type Number\n      @default 5\n    */\n    tickLength: 5,\n\n    /**\n      The distance between the tick line and the origin tick's templated output\n      @property tickPadding\n      @type Number\n      @default 3\n    */\n    tickPadding: 3,\n\n    /**\n      The total width of the y axis\n      @property width\n      @type Number\n      @default 40\n    */\n    width: 40,\n\n    /**\n      The orientation of the y axis. Possible values are `'left'` and `'right'`\n      @property orient\n      @type String\n      @default 'left'\n    */\n    orient: 'left',\n\n    attributeBindings: ['transform'],\n\n    classNameBindings: [':nf-y-axis', 'isOrientRight:orient-right:orient-left'],\n\n    _tickFilter: null,\n\n    /**\n      An optional filtering function to allow more control over what tick marks are displayed.\n      The function should have exactly the same signature as the function you'd use for an\n      `Array.prototype.filter()`.\n    \n      @property tickFilter\n      @type Function\n      @default null\n      @example\n    \n            {{#nf-y-axis tickFilter=myFilter}} \n              <text>{{tick.value}}</text>\n            {{/nf-y-axis}}\n    \n      And on your controller:\n      \n            myFilter: function(tick, index, ticks) {\n              return tick.value < 1000;\n            },\n    \n      The above example will filter down the set of ticks to only those that are less than 1000.\n    */\n    tickFilter: Ember['default'].computed(function (name, value) {\n      if (arguments.length > 1) {\n        this._tickFilter = value;\n      }\n      return this._tickFilter;\n    }),\n\n    /**\n      computed property. returns true if `orient` is equal to `'right'`.\n      @property isOrientRight\n      @type Boolean\n      @readonly\n    */\n    isOrientRight: Ember['default'].computed.equal('orient', 'right'),\n\n    /**\n      The SVG transform for positioning the component.\n      @property transform\n      @type String\n      @readonly\n    */\n    transform: Ember['default'].computed('x', 'y', function () {\n      var x = this.get('x');\n      var y = this.get('y');\n      return 'translate(' + x + ' ' + y + ')';\n    }),\n\n    /**\n      The x position of the component\n      @property x\n      @type Number\n      @readonly\n    */\n    x: Ember['default'].computed('orient', 'graph.width', 'width', 'graph.paddingLeft', 'graph.paddingRight', function () {\n      var orient = this.get('orient');\n      if (orient !== 'left') {\n        return this.get('graph.width') - this.get('width') - this.get('graph.paddingRight');\n      }\n      return this.get('graph.paddingLeft');\n    }),\n\n    /**\n      The y position of the component\n      @property y\n      @type Number\n      @readonly\n    */\n    y: Ember['default'].computed.alias('graph.graphY'),\n\n    /** \n      the height of the component\n      @property height\n      @type Number\n      @readonly\n    */\n    height: Ember['default'].computed.alias('graph.height'),\n\n    init: function init() {\n      this._super.apply(this, arguments);\n      this.set('graph.yAxis', this);\n      Ember['default'].deprecate('Non-block form of tick is deprecated. Please add `as |tick|` to your template.', this.get('template.blockParams'));\n    },\n\n    /**\n      Function to create the tick values. Can be overriden to provide specific values.\n      @method tickFactory\n      @param yScale {Function} a d3 scale function\n      @param tickCount {Number} the number of ticks desired\n      @param uniqueYData {Array} all y data represented, filted to be unique (used for ordinal cases)\n      @param yScaleType {String} the scale type of the containing graph.\n      @return {Array} an array of domain values at which ticks should be placed.\n    */\n    tickFactory: function tickFactory(yScale, tickCount, uniqueYData, yScaleType) {\n      var ticks = yScaleType === 'ordinal' ? uniqueYData : yScale.ticks(tickCount);\n      if (yScaleType === 'log') {\n        var step = Math.round(ticks.length / tickCount);\n        ticks = ticks.filter(function (tick, i) {\n          return i % step === 0;\n        });\n      }\n      return ticks;\n    },\n\n    tickData: Ember['default'].computed('graph.yScaleType', 'uniqueYData', 'yScale', 'tickCount', function () {\n      var yScaleType = this.get('graph.yScaleType');\n      if (yScaleType === 'ordinal') {\n        return this.get('uniqueYData');\n      } else {\n        var tickCount = this.get('tickCount');\n        var ticks = this.get('yScale').ticks(tickCount);\n        if (yScaleType === 'log') {\n          var step = Math.round(ticks.length / tickCount);\n          ticks = ticks.filter(function (tick, i) {\n            return i % step === 0;\n          });\n        }\n        return ticks;\n      }\n    }),\n\n    /**\n      All y data from the graph, filtered to unique values.\n      @property uniqueYData\n      @type Array\n      @readonly\n    */\n    uniqueYData: Ember['default'].computed.uniq('graph.yData'),\n\n    /** \n      The ticks to be displayed.\n      @property ticks\n      @type Array\n      @readonly\n    */\n    ticks: Ember['default'].computed('yScale', 'tickPadding', 'axisLineX', 'tickLength', 'isOrientRight', 'tickFilter', function () {\n      var yScale = this.get('yScale');\n      var tickPadding = this.get('tickPadding');\n      var axisLineX = this.get('axisLineX');\n      var tickLength = this.get('tickLength');\n      var isOrientRight = this.get('isOrientRight');\n      var tickFilter = this.get('tickFilter');\n      var ticks = this.get('tickData');\n      var x1 = isOrientRight ? axisLineX + tickLength : axisLineX - tickLength;\n      var x2 = axisLineX;\n      var labelx = isOrientRight ? tickLength + tickPadding : axisLineX - tickLength - tickPadding;\n\n      var result = ticks.map(function (tick) {\n        return {\n          value: tick,\n          y: yScale(tick),\n          x1: x1,\n          x2: x2,\n          labelx: labelx };\n      });\n\n      if (tickFilter) {\n        result = result.filter(tickFilter);\n      }\n\n      return Ember['default'].A(result);\n    }),\n\n    /**\n      The x position of the axis line.\n      @property axisLineX\n      @type Number\n      @readonly\n    */\n    axisLineX: Ember['default'].computed('isOrientRight', 'width', function () {\n      return this.get('isOrientRight') ? 0 : this.get('width');\n    }) });\n\n});","define('is-ember-really-fast-yet/components/nf-y-diff', ['exports', 'ember', 'ember-nf-graph/mixins/graph-has-graph-parent', 'ember-nf-graph/mixins/graph-requires-scale-source', 'ember-nf-graph/utils/nf/scale-utils'], function (exports, Ember, HasGraphParent, RequireScaleSource, scale_utils) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(HasGraphParent['default'], RequireScaleSource['default'], {\n    tagName: 'g',\n\n    attributeBindings: ['transform'],\n\n    classNameBindings: [':nf-y-diff', 'isPositive:positive:negative', 'isOrientRight:orient-right:orient-left'],\n\n    /**\n      The starting domain value of the difference measurement. The subrahend of the difference calculation.\n      @property a\n      @type Number\n      @default null\n    */\n    a: null,\n\n    /**\n      The ending domain value of the difference measurement. The minuend of the difference calculation.\n      @property b\n      @type Number\n      @default null\n    */\n    b: null,\n\n    /**\n      The amount of padding, in pixels, between the edge of the difference \"box\" and the content container\n      @property contentPadding\n      @type Number\n      @default 5\n    */\n    contentPadding: 5,\n\n    /**\n      The duration of the transition, in milliseconds, as the difference slides vertically\n      @property duration\n      @type Number\n      @default 400\n    */\n    duration: 400,\n\n    /**\n      The calculated vertical center of the difference box, in pixels.\n      @property yCenter\n      @type Number\n      @readonly\n    */\n    yCenter: Ember['default'].computed('yA', 'yB', function () {\n      var yA = +this.get('yA') || 0;\n      var yB = +this.get('yB') || 0;\n      return (yA + yB) / 2;\n    }),\n\n    /**\n      The y pixel value of b.\n      @property yB\n      @type Number\n    */\n    yB: Ember['default'].computed('yScale', 'b', function () {\n      return scale_utils.normalizeScale(this.get('yScale'), this.get('b'));\n    }),\n\n    /**\n      The y pixel value of a.\n      @property yA\n      @type Number\n    */\n    yA: Ember['default'].computed('yScale', 'a', function () {\n      return scale_utils.normalizeScale(this.get('yScale'), this.get('a'));\n    }),\n\n    /**\n      The SVG transformation of the component.\n      @property transform\n      @type String\n      @private\n      @readonly\n    */\n    transform: Ember['default'].computed.alias('graph.yAxis.transform'),\n\n    /**\n      The calculated difference between `a` and `b`.\n      @property diff\n      @type Number\n      @readonly\n    */\n    diff: Ember['default'].computed('a', 'b', function () {\n      return +this.get('b') - this.get('a');\n    }),\n\n    /**\n      Returns `true` if `diff` is a positive number\n      @property isPositive\n      @type Boolean\n      @readonly\n    */\n    isPositive: Ember['default'].computed.gte('diff', 0),\n\n    /**\n      Returns `true` if the graph's y-axis component is configured to orient right.\n      @property isOrientRight\n      @type Boolean\n      @readonly\n    */\n    isOrientRight: Ember['default'].computed.equal('graph.yAxis.orient', 'right'),\n\n    /**\n      The width of the difference box\n      @property width\n      @type Number\n      @readonly\n    */\n    width: Ember['default'].computed.alias('graph.yAxis.width'),\n\n    /**\n      The view controller for the view this component is present in\n      @property parentController\n      @type Ember.Controller\n      @private\n      @readonly\n    */\n    parentController: Ember['default'].computed.alias('templateData.view.controller'),\n\n    /**\n      The x pixel coordinate of the content container.\n      @property contentX\n      @type Number\n      @readonly\n    */\n    contentX: Ember['default'].computed('isOrientRight', 'width', 'contentPadding', function () {\n      var contentPadding = this.get('contentPadding');\n      var width = this.get('width');\n      return this.get('isOrientRight') ? width - contentPadding : contentPadding;\n    }),\n\n    rectPath: Ember['default'].computed('yA', 'yB', 'width', function () {\n      var x = 0;\n      var w = +this.get('width') || 0;\n      var x2 = x + w;\n      var yA = +this.get('yA') || 0;\n      var yB = +this.get('yB') || 0;\n      return 'M' + x + ',' + yA + ' L' + x + ',' + yB + ' L' + x2 + ',' + yB + ' L' + x2 + ',' + yA + ' L' + x + ',' + yA;\n    }),\n\n    /**\n      The SVG transformation used to position the content container.\n      @property contentTransform\n      @type String\n      @private\n      @readonly\n    */\n    contentTransform: Ember['default'].computed('contentX', 'yCenter', function () {\n      var contentX = this.get('contentX');\n      var yCenter = this.get('yCenter');\n      return 'translate(' + contentX + ' ' + yCenter + ')';\n    }),\n\n    /**\n      Sets up the d3 related elements when component is inserted \n      into the DOM\n      @method didInsertElement\n    */\n    didInsertElement: function didInsertElement() {\n      var element = this.get('element');\n      var g = d3.select(element);\n\n      var rectPath = this.get('rectPath');\n      var rect = g.insert('path', ':first-child').attr('class', 'nf-y-diff-rect').attr('d', rectPath);\n\n      var contentTransform = this.get('contentTransform');\n      var content = g.select('.nf-y-diff-content');\n      content.attr('transform', contentTransform);\n\n      this.set('rectElement', rect);\n      this.set('contentElement', content);\n    },\n\n    /**\n      Performs the transition (animation) of the elements.\n      @method doTransition\n    */\n    doTransition: function doTransition() {\n      var duration = this.get('duration');\n      var rectElement = this.get('rectElement');\n      var contentElement = this.get('contentElement');\n\n      if (rectElement) {\n        rectElement.transition().duration(duration).attr('d', this.get('rectPath'));\n      }\n\n      if (contentElement) {\n        contentElement.transition().duration(duration).attr('transform', this.get('contentTransform'));\n      }\n    },\n\n    /**\n      Schedules a transition once at afterRender.\n      @method transition\n    */\n    transition: Ember['default'].observer('a', 'b', function () {\n      Ember['default'].run.once(this, this.doTransition);\n    }),\n\n    /**\n      Updates to d3 managed DOM elments that do\n      not require transitioning, because they're width-related.\n      @method doAdjustWidth\n    */\n    doAdjustWidth: function doAdjustWidth() {\n      var contentElement = this.get('contentElement');\n      if (contentElement) {\n        var contentTransform = this.get('contentTransform');\n        contentElement.attr('transform', contentTransform);\n      }\n    },\n\n    adjustGraphHeight: Ember['default'].on('didInsertElement', Ember['default'].observer('graph.graphHeight', function () {\n      var rectElement = this.get('rectElement');\n      var contentElement = this.get('contentElement');\n\n      if (rectElement) {\n        rectElement.attr('d', this.get('rectPath'));\n      }\n\n      if (contentElement) {\n        contentElement.attr('transform', this.get('contentTransform'));\n      }\n    })),\n\n    /**\n      Schedules a call to `doAdjustWidth` on afterRender\n      @method adjustWidth\n    */\n    adjustWidth: Ember['default'].on('didInsertElement', Ember['default'].observer('isOrientRight', 'width', 'contentPadding', function () {\n      Ember['default'].run.once(this, this.doAdjustWidth);\n    })) });\n\n});","define('is-ember-really-fast-yet/controllers/graph-item', ['exports'], function (exports) {\n\n  'use strict';\n\n  var computed = Ember.computed;\n\n  exports['default'] = Ember.Controller.extend({\n\n    width: 200,\n    height: 60,\n    paddingLeft: 25,\n    paddingBottom: 10,\n\n    layout: computed('paddingLeft', 'paddingBottom', 'width', 'height', function () {\n      var padl = this.get('paddingLeft');\n      var padb = this.get('paddingBottom');\n      var w = this.get('width');\n      var h = this.get('height');\n\n      return {\n        padl: padl,\n        padb: padb,\n        w: w,\n        h: h,\n        bottom: h - padb,\n        textLeft: padl - 2,\n        textTop: 8\n      };\n    }),\n\n    computeGraph: function computeGraph(data) {\n      var layout = this.get('layout');\n\n      var extX = d3.extent(data, function (d) {\n        return d.x;\n      });\n      var extY = d3.extent(data, function (d) {\n        return d.y;\n      });\n\n      extY = [Math.max(0, extY[0] - (extY[1] - extY[0]) * 0.5), extY[1]];\n\n      var scaleX = d3.scale.linear().domain([extX[0], extX[1]]).range([layout.padl, layout.w]);\n      var scaleY = d3.scale.linear().domain([extY[1], extY[0]]).range([0, layout.bottom]);\n\n      var path = d3.svg.line().x(function (d) {\n        return scaleX(d.x);\n      }).y(function (d) {\n        return scaleY(d.y);\n      }).interpolate('monotone');\n\n      var xTicks = [];\n      for (var x = 0; x < extX[1]; x += 2) {\n        xTicks.push({ x: scaleX(x), y: 10, text: '' + x });\n      }\n\n      var yTicks = [];\n      for (var y = 0; y < extY[1]; y += 20) {\n        yTicks.push({ x: 10, y: scaleY(y), text: '' + y });\n      }\n\n      return {\n        path: path(data),\n        xTicks: xTicks,\n        yTicks: yTicks\n      };\n    },\n\n    graph: computed('layout', function () {\n      return this.computeGraph(this.get('model'));\n    }) });\n\n});","define('is-ember-really-fast-yet/initializers/app-version', ['exports', 'is-ember-really-fast-yet/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('is-ember-really-fast-yet/initializers/export-application-global', ['exports', 'ember', 'is-ember-really-fast-yet/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('is-ember-really-fast-yet/router', ['exports', 'ember', 'is-ember-really-fast-yet/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  exports['default'] = Router.map(function () {\n    this.route('baseline');\n  });\n\n});","define('is-ember-really-fast-yet/routes/baseline', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model() {\n      return range(100).map(function () {\n        return range(30).map(function (x) {\n          return { x: x, y: Math.random() * 100 };\n        });\n      });\n    }\n  });\n\n  function range(n) {\n    var result = [];\n    for (var i = 0; i < n; i++) {\n      result.push(i);\n    }\n    return result;\n  }\n\n});","define('is-ember-really-fast-yet/routes/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model() {\n      return range(100).map(function () {\n        return range(30).map(function (x) {\n          return { x: x, y: Math.random() * 100 };\n        });\n      });\n    }\n  });\n\n  function range(n) {\n    var result = [];\n    for (var i = 0; i < n; i++) {\n      result.push(i);\n    }\n    return result;\n  }\n\n});","define('is-ember-really-fast-yet/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createTextNode(\"Welcome to Ember.js\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        content(env, morph0, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/baseline', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"text\");\n            dom.setAttribute(el1,\"transform\",\"translate(0 50)\");\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, attribute = hooks.attribute, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element1 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element1,0,0);\n            var attrMorph0 = dom.createAttrMorph(element1, 'x');\n            var attrMorph1 = dom.createAttrMorph(element1, 'y');\n            set(env, context, \"tick\", blockArguments[0]);\n            attribute(env, attrMorph0, element1, \"x\", get(env, context, \"tick.x\"));\n            attribute(env, attrMorph1, element1, \"y\", get(env, context, \"tick.y\"));\n            content(env, morph0, context, \"tick.text\");\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"text\");\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, attribute = hooks.attribute, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element0,0,0);\n            var attrMorph0 = dom.createAttrMorph(element0, 'x');\n            var attrMorph1 = dom.createAttrMorph(element0, 'y');\n            set(env, context, \"tick\", blockArguments[0]);\n            attribute(env, attrMorph0, element0, \"x\", get(env, context, \"tick.x\"));\n            attribute(env, attrMorph1, element0, \"y\", get(env, context, \"tick.y\"));\n            content(env, morph0, context, \"tick.text\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          dom.setNamespace(\"http://www.w3.org/2000/svg\");\n          var el1 = dom.createElement(\"svg\");\n          dom.setAttribute(el1,\"width\",\"200\");\n          dom.setAttribute(el1,\"height\",\"75\");\n          dom.setAttribute(el1,\"class\",\"baseline\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"path\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"line\");\n          dom.setAttribute(el2,\"x1\",\"20\");\n          dom.setAttribute(el2,\"y1\",\"50\");\n          dom.setAttribute(el2,\"x2\",\"200\");\n          dom.setAttribute(el2,\"y2\",\"50\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"line\");\n          dom.setAttribute(el2,\"x1\",\"20\");\n          dom.setAttribute(el2,\"y1\",\"0\");\n          dom.setAttribute(el2,\"x2\",\"20\");\n          dom.setAttribute(el2,\"y2\",\"50\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, attribute = hooks.attribute, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element2 = dom.childAt(fragment, [1]);\n          var element3 = dom.childAt(element2, [1]);\n          var attrMorph0 = dom.createAttrMorph(element3, 'd');\n          var morph0 = dom.createMorphAt(element2,7,7);\n          var morph1 = dom.createMorphAt(element2,8,8);\n          attribute(env, attrMorph0, element3, \"d\", get(env, context, \"graphData.graph.path\"));\n          block(env, morph0, context, \"each\", [get(env, context, \"graphData.graph.xTicks\")], {}, child0, null);\n          block(env, morph1, context, \"each\", [get(env, context, \"graphData.graph.yTicks\")], {}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h1\");\n        var el2 = dom.createTextNode(\"Is Ember Really Fast Yet?\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h3\");\n        var el2 = dom.createTextNode(\"Baseline: No Ember components. SVG's in an #each with d3\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,4,4,contextualElement);\n        dom.insertBoundary(fragment, null);\n        block(env, morph0, context, \"each\", [get(env, context, \"model\")], {\"itemController\": \"graph-item\", \"keyword\": \"graphData\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-area', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"nf-dot\", [], {\"x\": get(env, context, \"trackedData.x\"), \"y\": get(env, context, \"trackedData.y\"), \"r\": get(env, context, \"trackingDotRadius\"), \"multiplierY\": get(env, context, \"multiplierY\"), \"multiplierX\": get(env, context, \"multiplierX\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"path\");\n        dom.setAttribute(el1,\"class\",\"area\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, null);\n        element(env, element0, context, \"bind-attr\", [], {\"d\": get(env, context, \"d\")});\n        block(env, morph0, context, \"if\", [get(env, context, \"showTrackingDot\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-bars', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"path\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          element(env, element0, context, \"bind-attr\", [], {\"d\": get(env, context, \"bar.path\"), \"class\": get(env, context, \"bar.className\")});\n          element(env, element0, context, \"action\", [\"nfBarClickBar\", get(env, context, \"bar.data\"), get(env, context, \"bar.index\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"bars\")], {\"keyword\": \"bar\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-brush-selection', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"rect\");\n        dom.setAttribute(el1,\"class\",\"nf-brush-selection-overlay\");\n        dom.setAttribute(el1,\"x\",\"0\");\n        dom.setAttribute(el1,\"y\",\"0\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"rect\");\n        dom.setAttribute(el1,\"class\",\"nf-brush-selection-overlay\");\n        dom.setAttribute(el1,\"y\",\"0\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"line\");\n        dom.setAttribute(el1,\"class\",\"nf-brush-selection-line\");\n        dom.setAttribute(el1,\"y1\",\"0\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"line\");\n        dom.setAttribute(el1,\"class\",\"nf-brush-selection-line\");\n        dom.setAttribute(el1,\"y1\",\"0\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"g\");\n        dom.setAttribute(el1,\"class\",\"nf-brush-selection-left-display\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"rect\");\n        dom.setAttribute(el2,\"class\",\"nf-brush-selection-left-text-bg\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"text\");\n        dom.setAttribute(el2,\"class\",\"nf-brush-selection-left-text\");\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"g\");\n        dom.setAttribute(el1,\"class\",\"nf-brush-selection-right-display\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"rect\");\n        dom.setAttribute(el2,\"class\",\"nf-brush-selection-right-text-bg\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"text\");\n        dom.setAttribute(el2,\"class\",\"nf-brush-selection-right-text\");\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(fragment, [2]);\n        var element2 = dom.childAt(fragment, [4]);\n        var element3 = dom.childAt(fragment, [6]);\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [8, 3]),0,0);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [10, 3]),0,0);\n        element(env, element0, context, \"bind-attr\", [], {\"width\": get(env, context, \"leftX\"), \"height\": get(env, context, \"graphHeight\")});\n        element(env, element1, context, \"bind-attr\", [], {\"x\": get(env, context, \"rightX\"), \"width\": get(env, context, \"rightWidth\"), \"height\": get(env, context, \"graphHeight\")});\n        element(env, element2, context, \"bind-attr\", [], {\"x1\": get(env, context, \"leftX\"), \"x2\": get(env, context, \"leftX\"), \"y2\": get(env, context, \"graphHeight\")});\n        element(env, element3, context, \"bind-attr\", [], {\"x1\": get(env, context, \"rightX\"), \"x2\": get(env, context, \"rightX\"), \"y2\": get(env, context, \"graphHeight\")});\n        content(env, morph0, context, \"leftDisplay\");\n        content(env, morph1, context, \"rightDisplay\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-crosshair', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"line\");\n        dom.setAttribute(el1,\"class\",\"vertical\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"line\");\n        dom.setAttribute(el1,\"class\",\"horizontal\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(fragment, [2]);\n        element(env, element0, context, \"bind-attr\", [], {\"x1\": get(env, context, \"x\"), \"x2\": get(env, context, \"x\"), \"y1\": \"0\", \"y2\": get(env, context, \"height\")});\n        element(env, element1, context, \"bind-attr\", [], {\"x1\": \"0\", \"x2\": get(env, context, \"width\"), \"y1\": get(env, context, \"y\"), \"y2\": get(env, context, \"y\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-graph-content', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.0-beta.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"rect\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, element = hooks.element;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element1 = dom.childAt(fragment, [1]);\n              element(env, element1, context, \"bind-attr\", [], {\"x\": get(env, context, \"lane.x\"), \"y\": get(env, context, \"lane.y\"), \"width\": get(env, context, \"width\"), \"height\": get(env, context, \"lane.height\")});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"g\");\n            dom.setAttribute(el1,\"class\",\"nf-grid-lanes\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"      \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n            block(env, morph0, context, \"each\", [get(env, context, \"gridLanes\")], {\"keyword\": \"lane\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.0-beta.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"          \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createElement(\"line\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, element = hooks.element;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var element0 = dom.childAt(fragment, [1]);\n              element(env, element0, context, \"bind-attr\", [], {\"x1\": get(env, context, \"fret.x\"), \"y1\": \"0\", \"x2\": get(env, context, \"fret.x\"), \"y2\": get(env, context, \"height\")});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"g\");\n            dom.setAttribute(el1,\"class\",\"nf-grid-frets\");\n            var el2 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"      \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);\n            block(env, morph0, context, \"each\", [get(env, context, \"frets\")], {\"keyword\": \"fret\"}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"if\", [get(env, context, \"graph.showLanes\")], {}, child0, null);\n          block(env, morph1, context, \"if\", [get(env, context, \"graph.showFrets\")], {}, child1, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"text\");\n          dom.setAttribute(el1,\"x\",\"0\");\n          dom.setAttribute(el1,\"y\",\"0\");\n          var el2 = dom.createTextNode(\"No data\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"rect\");\n        dom.setAttribute(el1,\"x\",\"0\");\n        dom.setAttribute(el1,\"y\",\"0\");\n        dom.setAttribute(el1,\"class\",\"background\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,4,4,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,6,6,contextualElement);\n        dom.insertBoundary(fragment, null);\n        element(env, element2, context, \"bind-attr\", [], {\"width\": get(env, context, \"width\"), \"height\": get(env, context, \"height\")});\n        block(env, morph0, context, \"if\", [get(env, context, \"graph.hasData\")], {}, child0, null);\n        block(env, morph1, context, \"unless\", [get(env, context, \"graph.hasData\")], {}, child1, null);\n        content(env, morph2, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-graph', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"style\",\"position:relative\");\n          var el2 = dom.createTextNode(\"\\n\t\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"pre\");\n          dom.setAttribute(el2,\"style\",\"position:absolute; z-index:1000\");\n          var el3 = dom.createComment(\"\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);\n          content(env, morph0, context, \"debugInfo\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        dom.setNamespace(\"http://www.w3.org/2000/svg\");\n        var el1 = dom.createElement(\"svg\");\n        dom.setAttribute(el1,\"class\",\"nf-graph\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"defs\");\n        var el3 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"clipPath\");\n        var el4 = dom.createTextNode(\"\\n\t\t\t\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"rect\");\n        dom.setAttribute(el4,\"x\",\"0\");\n        dom.setAttribute(el4,\"y\",\"0\");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n\t\t\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"rect\");\n        dom.setAttribute(el2,\"class\",\"background\");\n        dom.setAttribute(el2,\"x\",\"0\");\n        dom.setAttribute(el2,\"y\",\"0\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1, 1]);\n        var element2 = dom.childAt(element1, [1]);\n        var element3 = dom.childAt(element0, [3]);\n        var morph0 = dom.createMorphAt(element0,5,5);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, null);\n        element(env, element0, context, \"bind-attr\", [], {\"width\": get(env, context, \"width\"), \"height\": get(env, context, \"height\")});\n        element(env, element1, context, \"bind-attr\", [], {\"id\": get(env, context, \"contentClipPathId\")});\n        element(env, element2, context, \"bind-attr\", [], {\"width\": get(env, context, \"graphWidth\"), \"height\": get(env, context, \"graphHeight\")});\n        element(env, element3, context, \"bind-attr\", [], {\"width\": get(env, context, \"width\"), \"height\": get(env, context, \"height\")});\n        content(env, morph0, context, \"yield\");\n        block(env, morph1, context, \"if\", [get(env, context, \"debug\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-line', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"path\");\n          dom.setAttribute(el1,\"class\",\"interaction-mask\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          element(env, element0, context, \"bind-attr\", [], {\"d\": get(env, context, \"d\")});\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"\t\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          inline(env, morph0, context, \"nf-dot\", [], {\"x\": get(env, context, \"trackedData.x\"), \"y\": get(env, context, \"trackedData.y\"), \"r\": get(env, context, \"trackingDotRadius\"), \"multiplierY\": get(env, context, \"multiplierY\"), \"multiplierX\": get(env, context, \"multiplierX\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"path\");\n        dom.setAttribute(el1,\"class\",\"line\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element1 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,4,4,contextualElement);\n        dom.insertBoundary(fragment, null);\n        element(env, element1, context, \"bind-attr\", [], {\"d\": get(env, context, \"d\")});\n        block(env, morph0, context, \"if\", [get(env, context, \"selectable\")], {}, child0, null);\n        block(env, morph1, context, \"if\", [get(env, context, \"showTrackingDot\")], {}, child1, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-plots', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"\t\t\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            content(env, morph0, context, \"yield\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"nf-plot\", [], {\"x\": get(env, context, \"item.x\"), \"y\": get(env, context, \"item.y\"), \"action\": \"itemClicked\", \"data\": get(env, context, \"item.data\"), \"multiplierY\": get(env, context, \"multiplierY\"), \"multiplierX\": get(env, context, \"multiplierX\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"plotData\")], {\"keyword\": \"item\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-range-marker', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"g\");\n        dom.setAttribute(el1,\"class\",\"label\");\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"rect\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(fragment, [2]);\n        var morph0 = dom.createMorphAt(element0,0,0);\n        element(env, element0, context, \"bind-attr\", [], {\"transform\": get(env, context, \"labelTransform\")});\n        content(env, morph0, context, \"yield\");\n        element(env, element1, context, \"bind-attr\", [], {\"y\": get(env, context, \"marginTop\"), \"x\": get(env, context, \"x\"), \"width\": get(env, context, \"width\"), \"height\": get(env, context, \"height\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-right-tick', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"line\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"path\");\n        dom.setAttribute(el1,\"d\",\"M6,0 0,6 6,12\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        element(env, element0, context, \"bind-attr\", [], {\"x1\": get(env, context, \"graph.width\"), \"x2\": get(env, context, \"graph.width\"), \"y1\": \"0\", \"y2\": get(env, context, \"graph.height\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-table-manager', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"nf-table\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"table\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"thead\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"tr\");\n        var el5 = dom.createTextNode(\"\\n        \");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        var el5 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1, 1]),1,1);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-x-axis', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.12.0-beta.1\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"          \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"text\");\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n                content(env, morph0, context, \"tick.value\");\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.12.0-beta.1\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"          \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                inline(env, morph0, context, \"yield\", [get(env, context, \"tick\")], {});\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.0-beta.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"if\", [get(env, context, \"useDefaultTemplate\")], {}, child0, child1);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"view\", [\"nf-tick-label\"], {\"controller\": get(env, context, \"graph.parentController\"), \"x\": get(env, context, \"tick.x\"), \"y\": get(env, context, \"tick.labely\")}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            inline(env, morph0, context, \"view\", [\"nf-tick-label\"], {\"controller\": get(env, context, \"graph.parentController\"), \"template\": get(env, context, \"template\"), \"x\": get(env, context, \"tick.x\"), \"y\": get(env, context, \"tick.labely\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"g\");\n          dom.setAttribute(el1,\"class\",\"tick\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"line\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [3]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          set(env, context, \"tick\", blockArguments[0]);\n          block(env, morph0, context, \"if\", [get(env, context, \"template.blockParams\")], {}, child0, child1);\n          element(env, element1, context, \"bind-attr\", [], {\"x1\": get(env, context, \"tick.x\"), \"y1\": get(env, context, \"tick.y1\"), \"x2\": get(env, context, \"tick.x\"), \"y2\": get(env, context, \"tick.y2\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"line\");\n        dom.setAttribute(el1,\"x1\",\"0\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, null);\n        element(env, element2, context, \"bind-attr\", [], {\"y1\": get(env, context, \"axisLineY\"), \"x2\": get(env, context, \"width\"), \"y2\": get(env, context, \"axisLineY\")});\n        block(env, morph0, context, \"each\", [get(env, context, \"ticks\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-y-axis', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.12.0-beta.1\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"          \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createElement(\"text\");\n                var el2 = dom.createComment(\"\");\n                dom.appendChild(el1, el2);\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n                content(env, morph0, context, \"tick.value\");\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.12.0-beta.1\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"          \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                inline(env, morph0, context, \"yield\", [get(env, context, \"tick\")], {});\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.0-beta.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              block(env, morph0, context, \"if\", [get(env, context, \"useDefaultTemplate\")], {}, child0, child1);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"view\", [\"nf-tick-label\"], {\"controller\": get(env, context, \"graph.parentController\"), \"x\": get(env, context, \"tick.labelx\"), \"y\": get(env, context, \"tick.y\")}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      var child1 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"      \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n            inline(env, morph0, context, \"view\", [\"nf-tick-label\"], {\"controller\": get(env, context, \"graph.parentController\"), \"template\": get(env, context, \"template\"), \"x\": get(env, context, \"tick.labelx\"), \"y\": get(env, context, \"tick.y\")});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"g\");\n          dom.setAttribute(el1,\"class\",\"tick\");\n          var el2 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"line\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [3]);\n          var morph0 = dom.createMorphAt(element0,1,1);\n          set(env, context, \"tick\", blockArguments[0]);\n          block(env, morph0, context, \"if\", [get(env, context, \"template.blockParams\")], {}, child0, child1);\n          element(env, element1, context, \"bind-attr\", [], {\"x1\": get(env, context, \"tick.x1\"), \"y1\": get(env, context, \"tick.y\"), \"x2\": get(env, context, \"tick.x2\"), \"y2\": get(env, context, \"tick.y\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"line\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, null);\n        element(env, element2, context, \"bind-attr\", [], {\"x1\": get(env, context, \"axisLineX\"), \"y1\": \"0\", \"x2\": get(env, context, \"axisLineX\"), \"y2\": get(env, context, \"height\")});\n        block(env, morph0, context, \"each\", [get(env, context, \"ticks\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/components/nf-y-diff', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"g\");\n        dom.setAttribute(el1,\"class\",\"nf-y-diff-content\");\n        var el2 = dom.createTextNode(\"\\n\t\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.0-beta.1\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n              inline(env, morph0, context, \"nf-line\", [], {\"data\": get(env, context, \"graphData\")});\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.0-beta.1\",\n            blockParams: 1,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createElement(\"text\");\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement, blockArguments) {\n              var dom = env.dom;\n              var hooks = env.hooks, set = hooks.set, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);\n              set(env, context, \"tick\", blockArguments[0]);\n              content(env, morph0, context, \"tick.value\");\n              return fragment;\n            }\n          };\n        }());\n        var child2 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.12.0-beta.1\",\n            blockParams: 1,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createElement(\"text\");\n              var el2 = dom.createComment(\"\");\n              dom.appendChild(el1, el2);\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement, blockArguments) {\n              var dom = env.dom;\n              var hooks = env.hooks, set = hooks.set, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);\n              set(env, context, \"tick\", blockArguments[0]);\n              content(env, morph0, context, \"tick.value\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n            var morph2 = dom.createMorphAt(fragment,4,4,contextualElement);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"nf-graph-content\", [], {}, child0, null);\n            block(env, morph1, context, \"nf-x-axis\", [], {}, child1, null);\n            block(env, morph2, context, \"nf-y-axis\", [], {}, child2, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"nf-graph\", [], {\"width\": 200, \"height\": 75}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h1\");\n        var el2 = dom.createTextNode(\"Is Ember Really Fast Yet?\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h3\");\n        var el2 = dom.createTextNode(\"Test #1: graphs in an each\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,4,4,contextualElement);\n        dom.insertBoundary(fragment, null);\n        block(env, morph0, context, \"each\", [get(env, context, \"model\")], {\"keyword\": \"graphData\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('is-ember-really-fast-yet/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('is-ember-really-fast-yet/tests/controllers/graph-item.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/graph-item.js should pass jshint', function() { \n    ok(false, 'controllers/graph-item.js should pass jshint.\\ncontrollers/graph-item.js: line 1, col 16, \\'Ember\\' is not defined.\\ncontrollers/graph-item.js: line 3, col 16, \\'Ember\\' is not defined.\\ncontrollers/graph-item.js: line 30, col 16, \\'d3\\' is not defined.\\ncontrollers/graph-item.js: line 31, col 16, \\'d3\\' is not defined.\\ncontrollers/graph-item.js: line 35, col 18, \\'d3\\' is not defined.\\ncontrollers/graph-item.js: line 36, col 18, \\'d3\\' is not defined.\\ncontrollers/graph-item.js: line 38, col 16, \\'d3\\' is not defined.\\n\\n7 errors'); \n  });\n\n});","define('is-ember-really-fast-yet/tests/helpers/resolver', ['exports', 'ember/resolver', 'is-ember-really-fast-yet/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('is-ember-really-fast-yet/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('is-ember-really-fast-yet/tests/helpers/start-app', ['exports', 'ember', 'is-ember-really-fast-yet/app', 'is-ember-really-fast-yet/router', 'is-ember-really-fast-yet/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('is-ember-really-fast-yet/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('is-ember-really-fast-yet/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('is-ember-really-fast-yet/tests/routes/baseline.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/baseline.js should pass jshint', function() { \n    ok(true, 'routes/baseline.js should pass jshint.'); \n  });\n\n});","define('is-ember-really-fast-yet/tests/routes/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/index.js should pass jshint', function() { \n    ok(true, 'routes/index.js should pass jshint.'); \n  });\n\n});","define('is-ember-really-fast-yet/tests/test-helper', ['is-ember-really-fast-yet/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('is-ember-really-fast-yet/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('is-ember-really-fast-yet/tests/util/range.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - util');\n  test('util/range.js should pass jshint', function() { \n    ok(true, 'util/range.js should pass jshint.'); \n  });\n\n});","define('is-ember-really-fast-yet/util/range', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = range;\n\n  function range(n) {\n    var result = [];\n    for (var i = 0; i < n; i++) {\n      result.push(i);\n    }\n    return result;\n  }\n\n});","define('is-ember-really-fast-yet/views/nf-plot', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].View.extend({\n    tagName: 'g'\n  });\n\n});","define('is-ember-really-fast-yet/views/nf-tick-label', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].View.extend({\n    tagName: 'g',\n\n    attributeBindings: ['transform'],\n\n    transform: Ember['default'].computed('x', 'y', function () {\n      var x = this.get('x');\n      var y = this.get('y');\n      return 'translate(' + x + ' ' + y + ')';\n    }),\n\n    className: 'nf-tick-label'\n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('is-ember-really-fast-yet/config/environment', ['ember'], function(Ember) {\n  var prefix = 'is-ember-really-fast-yet';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"is-ember-really-fast-yet/tests/test-helper\");\n} else {\n  require(\"is-ember-really-fast-yet/app\")[\"default\"].create({\"name\":\"is-ember-really-fast-yet\",\"version\":\"0.0.0.c0ec5e86\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjziCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACznGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxlpvvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACthjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtljUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACltRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"is-ember-really-fast-yet.js"}